{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copycode.css","path":"css/copycode.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.css","path":"css/copyright.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/maupassant/_config.yml","hash":"89e810b1a542670c21a54f21072a5844a8b98f22","modified":1645212711280},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1645197889022},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1645197889051},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1645197889023},{"_id":"themes/maupassant/README.md","hash":"f7f36a633be735f2d9f5c2746cc6b440eb60e03c","modified":1645197889024},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1645197889022},{"_id":"themes/maupassant/languages/en.yml","hash":"93674c5df281d7f5647fe500e10924008d8017c6","modified":1645197889027},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1645197889026},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1645197889027},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1645197889028},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1645197889028},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1645197889030},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a6fa4ea6c3a59ae6ac13230d6154d1fdd6c149f3","modified":1645197889030},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"795f420382a150d570a06ffc278c4e7819260691","modified":1645197889031},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"00792d30c4197ee79049060f56308327888e6812","modified":1645197889046},{"_id":"themes/maupassant/layout/archive.pug","hash":"3770284e425fb0c14d60ae6ac454f58ba07ce76b","modified":1645197889045},{"_id":"themes/maupassant/layout/base.pug","hash":"4c380e48f7e84619e2fc311dac82fc0e0e017c46","modified":1645197889047},{"_id":"themes/maupassant/layout/index.pug","hash":"089fc4f6fa928c4229cd79d8dd38b7cb6155d8a5","modified":1645197889047},{"_id":"themes/maupassant/layout/page.pug","hash":"647bfba2208cbef052e1bf307d30a6775671215d","modified":1645197889048},{"_id":"themes/maupassant/layout/post.pug","hash":"0f5f124b944a64493d4b0b997c1eebfe8dd4f891","modified":1645197889048},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1645197889049},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"9ad3083c2f70fdb460ecbe277be97320a2621196","modified":1645197889050},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1645197889050},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1645197889034},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"7f9f9d33edc563651222c0dd9ade7f38d4600f7c","modified":1645197889033},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"8a4c53229394ba6cf63afd427b4e6b1dc1156526","modified":1645197889034},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1645197889036},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"063e74bd7b98f9df098aa213e69379effb53122e","modified":1645197889033},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"69541492efa4367040f925698f565bf5a535afae","modified":1645197889035},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1645197889037},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1645197889038},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1645197889037},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1645197889038},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a255fca3557a0dac0ad49c7d4456133420c22bd8","modified":1645197889039},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1645197889039},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"f848b6ac3f44cfd4110a2d1c742c73eacd6285ee","modified":1645197889040},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1645197889040},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"44935b31e7b3b6232a9a587775cfe9e90efc6a89","modified":1645197889041},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1645197889043},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"666a89edbc1d7186afba68e0b3bee7e957d7a26e","modified":1645197889042},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"757f517b776178e50ae4d3b8af129a3d80240d05","modified":1645197889043},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1645197889044},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1645197889044},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1645197889044},{"_id":"themes/maupassant/source/css/copycode.css","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1645197889052},{"_id":"themes/maupassant/source/css/copyright.css","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1645197889052},{"_id":"themes/maupassant/source/css/search.css","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1645197889054},{"_id":"themes/maupassant/source/css/donate.css","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1645197889053},{"_id":"themes/maupassant/source/css/style.scss","hash":"1f62641d42446fd00ad0e62cc5dd2b38811ab89e","modified":1645197889055},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1645197889060},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1645197889061},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1645197889062},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1645197889062},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1645197889063},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1645197889063},{"_id":"themes/maupassant/source/js/search.js","hash":"65d8e6d6c46fa060ce5b0d89e2fd778b6b2967d5","modified":1645197889064},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1645197889065},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1645197889066},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1645197889065},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1645197889056},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1645197889057},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1645197889057},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1645197889059},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1645197889058},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1645197889060},{"_id":"source/_posts/page.md","hash":"6779281424255f1685030f2f4f218dad5c3a5930","modified":1645199978659},{"_id":"public/2022/02/18/page/index.html","hash":"4fa98f8c2745e3189e902906450ce2fedd8eef22","modified":1645200004737},{"_id":"public/archives/index.html","hash":"22a5181655392b4594b2cc68d455c9185de6f961","modified":1645213299263},{"_id":"public/2022/02/18/hello-world/index.html","hash":"bccc31f1596501aad507f904ef5f04098c1881fa","modified":1645200004737},{"_id":"public/archives/2022/02/index.html","hash":"2210445025bd8040294e804f3689c605fa2198c4","modified":1645209559250},{"_id":"public/archives/2022/index.html","hash":"2210445025bd8040294e804f3689c605fa2198c4","modified":1645209559250},{"_id":"public/index.html","hash":"079fd8af690eaf33d365877a1c57999cde7810c9","modified":1645213299263},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1645212995751},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1645212995751},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1645212995751},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1645212995751},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1645212995751},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1645212995751},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1645212995751},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1645212995751},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1645212995751},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1645212995751},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1645212995751},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1645212995751},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1645212995751},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1645212995751},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1645212995751},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1645212995751},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1645212995751},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1645212995751},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1645212995751},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1645212995751},{"_id":"public/css/style.css","hash":"a9be1af00cdbd2d164fdf67c75db3c752c1dea4a","modified":1645212995751},{"_id":"source/_imgs/compilation_assembly.png","hash":"f8837a880e98315c0fda6d0fbab20601f3bcacac","modified":1645208464015},{"_id":"source/_posts/selenium/selenium.md","hash":"033e18431846389f60d8bc48088b82ef397b1b56","modified":1645209205017},{"_id":"source/_posts/test.md","hash":"46f2be64f95a1e205ae99a695f5aa7745212a348","modified":1645209588495},{"_id":"source/_posts/android_reverse_analytics/android_reverse_analytics.md","hash":"7867c26fdf2f336972dafea3e0ed1a92fa58ecce","modified":1645209308469},{"_id":"source/_posts/hexo/hexo.md","hash":"068db9df4f9d0db42a4f39918cd271a42c159d35","modified":1645209012043},{"_id":"source/_posts/computer_network_basics/computer_network_basics copy.md","hash":"c5dba167881709e5b9c2a9c670099d3a38c036fb","modified":1645209052223},{"_id":"source/_posts/linux_command/linux_command.md","hash":"091058a309fb0985de53223d050d64fe32c8c298","modified":1645209024717},{"_id":"source/_posts/android_reverse_analytics/compilation_assembly.png","hash":"f8837a880e98315c0fda6d0fbab20601f3bcacac","modified":1645209104614},{"_id":"source/_posts/test/compilation_assembly.png","hash":"f8837a880e98315c0fda6d0fbab20601f3bcacac","modified":1645209104614},{"_id":"public/2022/02/19/test/index.html","hash":"a50cb59b09bdf66eb125ab25d93f607d2bf2645d","modified":1645209559250},{"_id":"public/2020/04/28/linux_command/linux_command/index.html","hash":"7f857622ac7e0b43cf7a344ce12d043119c18132","modified":1645209729700},{"_id":"public/2020/04/28/computer_network_basics/computer_network_basics copy/index.html","hash":"df26046a4098f41e05584116d2092af9d7c883ba","modified":1645209729700},{"_id":"public/2020/04/24/android_reverse_analytics/android_reverse_analytics/index.html","hash":"ce882c4e0bebe155d1ca94c8576491199a8b654b","modified":1645209708095},{"_id":"public/2020/04/24/selenium/selenium/index.html","hash":"da7351daa3e1c583b90145f904e587391e1f3f71","modified":1645209729700},{"_id":"public/2018/11/07/hexo/hexo/index.html","hash":"d3ba94468a3952aa68c2b0b66f902f752c32a023","modified":1645209729700},{"_id":"public/archives/2018/index.html","hash":"c60eb90e29eb997cdcfc900ca3e03d01a806d4e7","modified":1645213299263},{"_id":"public/archives/2018/11/index.html","hash":"c60eb90e29eb997cdcfc900ca3e03d01a806d4e7","modified":1645213299263},{"_id":"public/archives/2020/index.html","hash":"ee840f1a779e2d9cd36b0c445b07ca22a56646b7","modified":1645213299263},{"_id":"public/archives/2020/04/index.html","hash":"ee840f1a779e2d9cd36b0c445b07ca22a56646b7","modified":1645213299263},{"_id":"public/categories/Android/index.html","hash":"0970f3503f55076eaaa699fe643117e288bbf40d","modified":1645213299263},{"_id":"public/tags/Blog/index.html","hash":"df34f5d286fd214f56795eaa8bc12f54a6b16963","modified":1645213299263},{"_id":"public/tags/Computer-Network/index.html","hash":"fb5b66c3b0c9cf41191e1903ac5cad85c36db3d4","modified":1645213299263},{"_id":"public/tags/Linux/index.html","hash":"462c96f695c47d4abf4bea928ca49aa3ccb6954f","modified":1645213299263},{"_id":"public/tags/Test/index.html","hash":"8fe4937fb312222ac6fa59629a61af4bd1f04921","modified":1645211817864},{"_id":"public/tags/Security/index.html","hash":"3ac45e1f3f092f97440cedc9fc203217875491b1","modified":1645213299263},{"_id":"public/2022/02/19/test/compilation_assembly.png","hash":"f8837a880e98315c0fda6d0fbab20601f3bcacac","modified":1645209559250},{"_id":"source/_posts/android_reverse_analytics.md","hash":"5c4ea25471454c851f372ddf2c6b6750ffc3b3f8","modified":1645212430525},{"_id":"public/2020/04/24/android_reverse_analytics/index.html","hash":"d5a4f722ca76210ebcffa0f1f4b4d5a6bfcb855c","modified":1645213299263},{"_id":"public/2020/04/24/android_reverse_analytics/compilation_assembly.png","hash":"f8837a880e98315c0fda6d0fbab20601f3bcacac","modified":1645212995751},{"_id":"source/hexo.md","hash":"068db9df4f9d0db42a4f39918cd271a42c159d35","modified":1645209745083},{"_id":"source/_posts/linux_command.md","hash":"67da600ac913247098a9d75b09508e119514c68b","modified":1645212772196},{"_id":"source/_posts/computer_network_basics copy.md","hash":"95479e98424da46cb7cf75e6514ef68a8b149c67","modified":1645212739559},{"_id":"source/_posts/selenium.md","hash":"85b901e65a303751d2a3fc744effac832185b219","modified":1645212791427},{"_id":"public/hexo.html","hash":"cfd2016d9e98a1f316b3f2b8ac8468eb16ff0874","modified":1645209765860},{"_id":"public/2020/04/28/linux_command/index.html","hash":"f2b5a567f246b82101f6dfb7063b6b8cc4609a76","modified":1645213299263},{"_id":"public/2020/04/28/computer_network_basics copy/index.html","hash":"b8a7c7af207f2ab6ab223980ba8a15f7920d2af8","modified":1645213299263},{"_id":"public/2020/04/24/selenium/index.html","hash":"28e3b0ee2c0c9f2eb58180f0b820969687d18af1","modified":1645213299263},{"_id":"source/_posts/chat_system_web.md","hash":"0887aa680c6aa80c288f3ca5e66cec816a97aa4c","modified":1645212451879},{"_id":"source/_posts/git_command.md","hash":"f1807a37fcb75f007919e8b7c96d802c66ae3245","modified":1645212813789},{"_id":"source/_posts/hexo.md","hash":"9a69ed26c0121217558ae0281df453333d07a170","modified":1645213349839},{"_id":"public/2020/04/22/chat_system_web/index.html","hash":"aac7a4697a0f84af8d57f2061b284168bd141ef7","modified":1645213299263},{"_id":"public/2018/11/07/hexo/index.html","hash":"fa54a981abeb7fd901ac3f20554d1e151725b0d6","modified":1645213506945},{"_id":"public/2018/11/07/git_command/index.html","hash":"cb8b2291cf18e28357b0fef2d82d47997f79e008","modified":1645213299263},{"_id":"public/categories/Application/index.html","hash":"fd70b2b63fd1ca3a9fd2b455dee55f9583392006","modified":1645213299263},{"_id":"public/categories/Command/index.html","hash":"eee137bcd20107056361e3cac2b392294db8fd48","modified":1645213299263},{"_id":"public/tags/Web/index.html","hash":"737de85b2a966fabdfa7618fd29ac523859dac9a","modified":1645213299263},{"_id":"public/tags/Git/index.html","hash":"8fcd3a4225afdcf0e6ab9c533ebb2f9f4c48765d","modified":1645213299263},{"_id":"public/categories/Computer-Network/index.html","hash":"fb5b66c3b0c9cf41191e1903ac5cad85c36db3d4","modified":1645213299263},{"_id":"public/categories/Test/index.html","hash":"dda851eb19901646b2d57d861230fede3d75babb","modified":1645213299263},{"_id":"public/categories/Other/index.html","hash":"d3e147b890f0e5e3f05b6829a17e897fd11c6a12","modified":1645213299263},{"_id":"public/tags/Automation-Test/index.html","hash":"ebb4c2dd2434712d6b13eb95d7ca9454d2ea00e2","modified":1645213299263}],"Category":[{"name":"Android","_id":"ckzsprryx000yjcuphpkj7ir4"},{"name":"Android/df","_id":"ckzspte1e0010jcupdo6r2217"},{"name":"Application","_id":"ckzsripwi0006u8upe7qlc1uy"},{"name":"Command","_id":"ckzss6n2e000hu8upbwr5bjr7"},{"name":"Computer Network","_id":"ckzst6qjg0000xgup6o5c48yw"},{"name":"Other","_id":"ckzst76990002xgup155z44zv"},{"name":"Test","_id":"ckzst7lfm0005xgup6edudx94"},{"name":"_Other","_id":"ckzst8oqv0009xgup6ks60yio"}],"Data":[],"Page":[],"Post":[{"title":"安卓反向分析学习","date":"2020-04-23T16:00:00.000Z","_content":"\n对于安卓反向分析我其实只是刚刚入门，或者说入门都不算，所以写这篇文章的目的并不是要教什么干货，而是一方面作为自己的学习笔记方便学而时习之，另一方面希望能给想入门的纯小白一点借鉴作用（在安装工具方面什么的），毕竟我也是小白，看问题的角度应该比较相似叭。\n\n<!--more-->\n\n## 相关概念\n\n我要说的是那些在搞安卓反向分析之前都不太有机会去深入理解的概念，以及在这个学习课题中比较重要的概念。不全，但至少是我跟着Writeup做了两道14年阿里移动安全挑战赛的题之后认为需要的基本知识储备。\n\n- 编译(Compile)和汇编(Assemble)\n\n    编译指的是将高级语言程序转化成汇编语言程序，汇编则是将汇编语言程序转化成可运行的二进制文件。搞开发的小伙伴应该很熟悉自己使用的高级语言如C、Java、Python，不过运行在虚拟机上的语言并不遵循前面说的“高级语言->汇编语言->二进制文件”。\n\n    高级语言大家都比较熟悉，那什么是汇编语言呢（这句话怎么有股老营销号的感觉）？其实汇编语言就是使用助记符（Mnemonics）来代替和表示特定指令的语言，一个助记符就对应着指令集中的一条命令，一种汇编语言就对应一套指令集，指令集和CPU架构也是一一对应的。\n\n- 指令集\n\n    指令集顾名思义就是指令的集合，指令就是控制CPU的单元操作，不可再分。现存指令集都分为两种：RISC (Reduced Instruction Set Computing)和CISC (Complex Instruction Set Computing)，前者是精简指令集，后者是复杂指令集，区别就是单条指令能做多少事。\n\n    主流指令集就是：Intel x86指令集（复杂）、ARM指令集（精简）和MIPS指令集（精简）。后面提到的IDA Pro这个反编译工具则使用的是ARM指令集的汇编助记符。\n\n- Dalvik & Dex字节码\n\n    虽然安卓应用使用Java语言来开发，但是安卓有自己的虚拟机，还有自己的Android SDK (Software Development Kit)。Dalvik就是安卓虚拟机，在Android 5.0之后被ART (Android Runtime)取代。Dex字节码相当于Java程序的.class文件，是可以直接在安卓虚拟机上运行的文件，文件后缀为dex。\n\n- Smali & Baksmali\n\n    这两个分为是Dalvik的汇编器和反汇编器，三个词都是冰岛语。这里汇编的输入是.smali文件，输出是.dex文件。Android项目在生成apk安装包的过程其实并不产生smali文件。由于已经生成的.dex文件是没办法反编译回java文件的，而.dex文件又是人类不可读的，所以便产生了这么一个中间物，方便程序员调试自己的项目，当然，也方便了攻击者篡改代码。既然是人类可读的，那就有一定的语法，所以smali也算是一种语言。\n\n    {% asset_img compilation_assembly.png %}\n\n    编译汇编理解图图片是根据我自己的理解画的，虚线部分不是特别确定。其中左边是一般高级语言程序到可执行文件的编译汇编流程（参考C语言），右边分别是Java和Android的对比图，灰色表示过程，橙色表示虚拟机，方框表示可运行在对应虚拟机上的文件，蓝色表示工具。\n\n- Apk安装包\n\n    [Apk (Android application package)](https://en.wikipedia.org/wiki/Apk_(file_format))就是安卓的应用安装包，本质就是个压缩包，除了包含程序的所有运行文件以外，还有一些格式文件、签名信息等。\n\n- so文件\n\n- native方法\n\n## 步骤\n\n1. 打开安卓模拟器安装apk；\n2. 打开UI Automator Viewer查看关键组件的名称；\n3. 打开Jadx反编译apk找到组件创建位置并分析上下文：\n    1. 如果可以通过修改语句实现目的，则打开Android Killer修改smali文件；\n    2. 否则如果用了关键方法为native方法，就找到对应so文件并将其导入IDA Pro进行分析，按F5可查看伪代码，找到关键处可用插件Keypatch修改指令字节；\n4. 用Android Killer重新编译项目打包成apk，并安装到模拟器上查看效果。\n\n## 工具\n\n- Android Studio/安卓模拟器\n- UI Automator Viewer\n- Jadx\n- Android Killer\n- IDA Pro + Keypatch","source":"_posts/android_reverse_analytics.md","raw":"---\ntitle: 安卓反向分析学习\ndate: 2020-04-24\ncategories: Android\ntags: Security\n---\n\n对于安卓反向分析我其实只是刚刚入门，或者说入门都不算，所以写这篇文章的目的并不是要教什么干货，而是一方面作为自己的学习笔记方便学而时习之，另一方面希望能给想入门的纯小白一点借鉴作用（在安装工具方面什么的），毕竟我也是小白，看问题的角度应该比较相似叭。\n\n<!--more-->\n\n## 相关概念\n\n我要说的是那些在搞安卓反向分析之前都不太有机会去深入理解的概念，以及在这个学习课题中比较重要的概念。不全，但至少是我跟着Writeup做了两道14年阿里移动安全挑战赛的题之后认为需要的基本知识储备。\n\n- 编译(Compile)和汇编(Assemble)\n\n    编译指的是将高级语言程序转化成汇编语言程序，汇编则是将汇编语言程序转化成可运行的二进制文件。搞开发的小伙伴应该很熟悉自己使用的高级语言如C、Java、Python，不过运行在虚拟机上的语言并不遵循前面说的“高级语言->汇编语言->二进制文件”。\n\n    高级语言大家都比较熟悉，那什么是汇编语言呢（这句话怎么有股老营销号的感觉）？其实汇编语言就是使用助记符（Mnemonics）来代替和表示特定指令的语言，一个助记符就对应着指令集中的一条命令，一种汇编语言就对应一套指令集，指令集和CPU架构也是一一对应的。\n\n- 指令集\n\n    指令集顾名思义就是指令的集合，指令就是控制CPU的单元操作，不可再分。现存指令集都分为两种：RISC (Reduced Instruction Set Computing)和CISC (Complex Instruction Set Computing)，前者是精简指令集，后者是复杂指令集，区别就是单条指令能做多少事。\n\n    主流指令集就是：Intel x86指令集（复杂）、ARM指令集（精简）和MIPS指令集（精简）。后面提到的IDA Pro这个反编译工具则使用的是ARM指令集的汇编助记符。\n\n- Dalvik & Dex字节码\n\n    虽然安卓应用使用Java语言来开发，但是安卓有自己的虚拟机，还有自己的Android SDK (Software Development Kit)。Dalvik就是安卓虚拟机，在Android 5.0之后被ART (Android Runtime)取代。Dex字节码相当于Java程序的.class文件，是可以直接在安卓虚拟机上运行的文件，文件后缀为dex。\n\n- Smali & Baksmali\n\n    这两个分为是Dalvik的汇编器和反汇编器，三个词都是冰岛语。这里汇编的输入是.smali文件，输出是.dex文件。Android项目在生成apk安装包的过程其实并不产生smali文件。由于已经生成的.dex文件是没办法反编译回java文件的，而.dex文件又是人类不可读的，所以便产生了这么一个中间物，方便程序员调试自己的项目，当然，也方便了攻击者篡改代码。既然是人类可读的，那就有一定的语法，所以smali也算是一种语言。\n\n    {% asset_img compilation_assembly.png %}\n\n    编译汇编理解图图片是根据我自己的理解画的，虚线部分不是特别确定。其中左边是一般高级语言程序到可执行文件的编译汇编流程（参考C语言），右边分别是Java和Android的对比图，灰色表示过程，橙色表示虚拟机，方框表示可运行在对应虚拟机上的文件，蓝色表示工具。\n\n- Apk安装包\n\n    [Apk (Android application package)](https://en.wikipedia.org/wiki/Apk_(file_format))就是安卓的应用安装包，本质就是个压缩包，除了包含程序的所有运行文件以外，还有一些格式文件、签名信息等。\n\n- so文件\n\n- native方法\n\n## 步骤\n\n1. 打开安卓模拟器安装apk；\n2. 打开UI Automator Viewer查看关键组件的名称；\n3. 打开Jadx反编译apk找到组件创建位置并分析上下文：\n    1. 如果可以通过修改语句实现目的，则打开Android Killer修改smali文件；\n    2. 否则如果用了关键方法为native方法，就找到对应so文件并将其导入IDA Pro进行分析，按F5可查看伪代码，找到关键处可用插件Keypatch修改指令字节；\n4. 用Android Killer重新编译项目打包成apk，并安装到模拟器上查看效果。\n\n## 工具\n\n- Android Studio/安卓模拟器\n- UI Automator Viewer\n- Jadx\n- Android Killer\n- IDA Pro + Keypatch","slug":"android_reverse_analytics","published":1,"updated":"2022-02-18T19:27:10.525Z","_id":"ckzsre96e0000wcup2yzr2kj1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于安卓反向分析我其实只是刚刚入门，或者说入门都不算，所以写这篇文章的目的并不是要教什么干货，而是一方面作为自己的学习笔记方便学而时习之，另一方面希望能给想入门的纯小白一点借鉴作用（在安装工具方面什么的），毕竟我也是小白，看问题的角度应该比较相似叭。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><p>我要说的是那些在搞安卓反向分析之前都不太有机会去深入理解的概念，以及在这个学习课题中比较重要的概念。不全，但至少是我跟着Writeup做了两道14年阿里移动安全挑战赛的题之后认为需要的基本知识储备。</p>\n<ul>\n<li><p>编译(Compile)和汇编(Assemble)</p>\n<p>  编译指的是将高级语言程序转化成汇编语言程序，汇编则是将汇编语言程序转化成可运行的二进制文件。搞开发的小伙伴应该很熟悉自己使用的高级语言如C、Java、Python，不过运行在虚拟机上的语言并不遵循前面说的“高级语言-&gt;汇编语言-&gt;二进制文件”。</p>\n<p>  高级语言大家都比较熟悉，那什么是汇编语言呢（这句话怎么有股老营销号的感觉）？其实汇编语言就是使用助记符（Mnemonics）来代替和表示特定指令的语言，一个助记符就对应着指令集中的一条命令，一种汇编语言就对应一套指令集，指令集和CPU架构也是一一对应的。</p>\n</li>\n<li><p>指令集</p>\n<p>  指令集顾名思义就是指令的集合，指令就是控制CPU的单元操作，不可再分。现存指令集都分为两种：RISC (Reduced Instruction Set Computing)和CISC (Complex Instruction Set Computing)，前者是精简指令集，后者是复杂指令集，区别就是单条指令能做多少事。</p>\n<p>  主流指令集就是：Intel x86指令集（复杂）、ARM指令集（精简）和MIPS指令集（精简）。后面提到的IDA Pro这个反编译工具则使用的是ARM指令集的汇编助记符。</p>\n</li>\n<li><p>Dalvik &amp; Dex字节码</p>\n<p>  虽然安卓应用使用Java语言来开发，但是安卓有自己的虚拟机，还有自己的Android SDK (Software Development Kit)。Dalvik就是安卓虚拟机，在Android 5.0之后被ART (Android Runtime)取代。Dex字节码相当于Java程序的.class文件，是可以直接在安卓虚拟机上运行的文件，文件后缀为dex。</p>\n</li>\n<li><p>Smali &amp; Baksmali</p>\n<p>  这两个分为是Dalvik的汇编器和反汇编器，三个词都是冰岛语。这里汇编的输入是.smali文件，输出是.dex文件。Android项目在生成apk安装包的过程其实并不产生smali文件。由于已经生成的.dex文件是没办法反编译回java文件的，而.dex文件又是人类不可读的，所以便产生了这么一个中间物，方便程序员调试自己的项目，当然，也方便了攻击者篡改代码。既然是人类可读的，那就有一定的语法，所以smali也算是一种语言。</p>\n  <img src=\"/2020/04/24/android_reverse_analytics/compilation_assembly.png\" class=\"\">\n\n<p>  编译汇编理解图图片是根据我自己的理解画的，虚线部分不是特别确定。其中左边是一般高级语言程序到可执行文件的编译汇编流程（参考C语言），右边分别是Java和Android的对比图，灰色表示过程，橙色表示虚拟机，方框表示可运行在对应虚拟机上的文件，蓝色表示工具。</p>\n</li>\n<li><p>Apk安装包</p>\n<p>  <a href=\"https://en.wikipedia.org/wiki/Apk_(file_format)\">Apk (Android application package)</a>就是安卓的应用安装包，本质就是个压缩包，除了包含程序的所有运行文件以外，还有一些格式文件、签名信息等。</p>\n</li>\n<li><p>so文件</p>\n</li>\n<li><p>native方法</p>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>打开安卓模拟器安装apk；</li>\n<li>打开UI Automator Viewer查看关键组件的名称；</li>\n<li>打开Jadx反编译apk找到组件创建位置并分析上下文：<ol>\n<li>如果可以通过修改语句实现目的，则打开Android Killer修改smali文件；</li>\n<li>否则如果用了关键方法为native方法，就找到对应so文件并将其导入IDA Pro进行分析，按F5可查看伪代码，找到关键处可用插件Keypatch修改指令字节；</li>\n</ol>\n</li>\n<li>用Android Killer重新编译项目打包成apk，并安装到模拟器上查看效果。</li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>Android Studio/安卓模拟器</li>\n<li>UI Automator Viewer</li>\n<li>Jadx</li>\n<li>Android Killer</li>\n<li>IDA Pro + Keypatch</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>对于安卓反向分析我其实只是刚刚入门，或者说入门都不算，所以写这篇文章的目的并不是要教什么干货，而是一方面作为自己的学习笔记方便学而时习之，另一方面希望能给想入门的纯小白一点借鉴作用（在安装工具方面什么的），毕竟我也是小白，看问题的角度应该比较相似叭。</p>","more":"<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><p>我要说的是那些在搞安卓反向分析之前都不太有机会去深入理解的概念，以及在这个学习课题中比较重要的概念。不全，但至少是我跟着Writeup做了两道14年阿里移动安全挑战赛的题之后认为需要的基本知识储备。</p>\n<ul>\n<li><p>编译(Compile)和汇编(Assemble)</p>\n<p>  编译指的是将高级语言程序转化成汇编语言程序，汇编则是将汇编语言程序转化成可运行的二进制文件。搞开发的小伙伴应该很熟悉自己使用的高级语言如C、Java、Python，不过运行在虚拟机上的语言并不遵循前面说的“高级语言-&gt;汇编语言-&gt;二进制文件”。</p>\n<p>  高级语言大家都比较熟悉，那什么是汇编语言呢（这句话怎么有股老营销号的感觉）？其实汇编语言就是使用助记符（Mnemonics）来代替和表示特定指令的语言，一个助记符就对应着指令集中的一条命令，一种汇编语言就对应一套指令集，指令集和CPU架构也是一一对应的。</p>\n</li>\n<li><p>指令集</p>\n<p>  指令集顾名思义就是指令的集合，指令就是控制CPU的单元操作，不可再分。现存指令集都分为两种：RISC (Reduced Instruction Set Computing)和CISC (Complex Instruction Set Computing)，前者是精简指令集，后者是复杂指令集，区别就是单条指令能做多少事。</p>\n<p>  主流指令集就是：Intel x86指令集（复杂）、ARM指令集（精简）和MIPS指令集（精简）。后面提到的IDA Pro这个反编译工具则使用的是ARM指令集的汇编助记符。</p>\n</li>\n<li><p>Dalvik &amp; Dex字节码</p>\n<p>  虽然安卓应用使用Java语言来开发，但是安卓有自己的虚拟机，还有自己的Android SDK (Software Development Kit)。Dalvik就是安卓虚拟机，在Android 5.0之后被ART (Android Runtime)取代。Dex字节码相当于Java程序的.class文件，是可以直接在安卓虚拟机上运行的文件，文件后缀为dex。</p>\n</li>\n<li><p>Smali &amp; Baksmali</p>\n<p>  这两个分为是Dalvik的汇编器和反汇编器，三个词都是冰岛语。这里汇编的输入是.smali文件，输出是.dex文件。Android项目在生成apk安装包的过程其实并不产生smali文件。由于已经生成的.dex文件是没办法反编译回java文件的，而.dex文件又是人类不可读的，所以便产生了这么一个中间物，方便程序员调试自己的项目，当然，也方便了攻击者篡改代码。既然是人类可读的，那就有一定的语法，所以smali也算是一种语言。</p>\n  <img src=\"/2020/04/24/android_reverse_analytics/compilation_assembly.png\" class=\"\">\n\n<p>  编译汇编理解图图片是根据我自己的理解画的，虚线部分不是特别确定。其中左边是一般高级语言程序到可执行文件的编译汇编流程（参考C语言），右边分别是Java和Android的对比图，灰色表示过程，橙色表示虚拟机，方框表示可运行在对应虚拟机上的文件，蓝色表示工具。</p>\n</li>\n<li><p>Apk安装包</p>\n<p>  <a href=\"https://en.wikipedia.org/wiki/Apk_(file_format)\">Apk (Android application package)</a>就是安卓的应用安装包，本质就是个压缩包，除了包含程序的所有运行文件以外，还有一些格式文件、签名信息等。</p>\n</li>\n<li><p>so文件</p>\n</li>\n<li><p>native方法</p>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>打开安卓模拟器安装apk；</li>\n<li>打开UI Automator Viewer查看关键组件的名称；</li>\n<li>打开Jadx反编译apk找到组件创建位置并分析上下文：<ol>\n<li>如果可以通过修改语句实现目的，则打开Android Killer修改smali文件；</li>\n<li>否则如果用了关键方法为native方法，就找到对应so文件并将其导入IDA Pro进行分析，按F5可查看伪代码，找到关键处可用插件Keypatch修改指令字节；</li>\n</ol>\n</li>\n<li>用Android Killer重新编译项目打包成apk，并安装到模拟器上查看效果。</li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>Android Studio/安卓模拟器</li>\n<li>UI Automator Viewer</li>\n<li>Jadx</li>\n<li>Android Killer</li>\n<li>IDA Pro + Keypatch</li>\n</ul>"},{"title":"Linux常用指令","date":"2020-04-27T16:00:00.000Z","_content":"\nLinux常用指令\n\n<!--more-->\n\n## 解压缩\n.tar\n```$ tar -xvf <file_name>.tar```\n```$ tar -cvf <file_name>.tar <directory_name>```\n\n.gz\ntar -xzf <file_name>.gz\ntar -czf <file_name>.gz <directory_name>\n\n.tar.gz\ngzip / gunzip\n\n.rar\nunrar\n\n.zip\nunzip\n\n## 修改文件操作权限\n$ chmod\n\n数字设定：4r 2w 1x, e.g. $ chmod 777 a.exe\n符号设定：u拥有者 g所属群组 o其他人 a所有人 +添加 -移除 =设定 r读 w写 x执行，e.g. $chmod a+x, g+w a.exe\n\n## 查看文件\ncat 跳到最后一页\nmore 回车可翻页\nless 光标上下浏览\n\n## 输出当前路径\n$ pwd (print working directory)","source":"_posts/linux_command.md","raw":"---\ntitle: Linux常用指令\ndate: 2020-04-28\ncategories: Command\ntags: Linux\n---\n\nLinux常用指令\n\n<!--more-->\n\n## 解压缩\n.tar\n```$ tar -xvf <file_name>.tar```\n```$ tar -cvf <file_name>.tar <directory_name>```\n\n.gz\ntar -xzf <file_name>.gz\ntar -czf <file_name>.gz <directory_name>\n\n.tar.gz\ngzip / gunzip\n\n.rar\nunrar\n\n.zip\nunzip\n\n## 修改文件操作权限\n$ chmod\n\n数字设定：4r 2w 1x, e.g. $ chmod 777 a.exe\n符号设定：u拥有者 g所属群组 o其他人 a所有人 +添加 -移除 =设定 r读 w写 x执行，e.g. $chmod a+x, g+w a.exe\n\n## 查看文件\ncat 跳到最后一页\nmore 回车可翻页\nless 光标上下浏览\n\n## 输出当前路径\n$ pwd (print working directory)","slug":"linux_command","published":1,"updated":"2022-02-18T19:32:52.196Z","_id":"ckzsrf1400001zcupcg52fldq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Linux常用指令</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h2><p>.tar<br><code>$ tar -xvf &lt;file_name&gt;.tar</code><br><code>$ tar -cvf &lt;file_name&gt;.tar &lt;directory_name&gt;</code></p>\n<p>.gz<br>tar -xzf <file_name>.gz<br>tar -czf <file_name>.gz <directory_name></p>\n<p>.tar.gz<br>gzip / gunzip</p>\n<p>.rar<br>unrar</p>\n<p>.zip<br>unzip</p>\n<h2 id=\"修改文件操作权限\"><a href=\"#修改文件操作权限\" class=\"headerlink\" title=\"修改文件操作权限\"></a>修改文件操作权限</h2><p>$ chmod</p>\n<p>数字设定：4r 2w 1x, e.g. $ chmod 777 a.exe<br>符号设定：u拥有者 g所属群组 o其他人 a所有人 +添加 -移除 =设定 r读 w写 x执行，e.g. $chmod a+x, g+w a.exe</p>\n<h2 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h2><p>cat 跳到最后一页<br>more 回车可翻页<br>less 光标上下浏览</p>\n<h2 id=\"输出当前路径\"><a href=\"#输出当前路径\" class=\"headerlink\" title=\"输出当前路径\"></a>输出当前路径</h2><p>$ pwd (print working directory)</p>\n","site":{"data":{}},"excerpt":"<p>Linux常用指令</p>","more":"<h2 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h2><p>.tar<br><code>$ tar -xvf &lt;file_name&gt;.tar</code><br><code>$ tar -cvf &lt;file_name&gt;.tar &lt;directory_name&gt;</code></p>\n<p>.gz<br>tar -xzf <file_name>.gz<br>tar -czf <file_name>.gz <directory_name></p>\n<p>.tar.gz<br>gzip / gunzip</p>\n<p>.rar<br>unrar</p>\n<p>.zip<br>unzip</p>\n<h2 id=\"修改文件操作权限\"><a href=\"#修改文件操作权限\" class=\"headerlink\" title=\"修改文件操作权限\"></a>修改文件操作权限</h2><p>$ chmod</p>\n<p>数字设定：4r 2w 1x, e.g. $ chmod 777 a.exe<br>符号设定：u拥有者 g所属群组 o其他人 a所有人 +添加 -移除 =设定 r读 w写 x执行，e.g. $chmod a+x, g+w a.exe</p>\n<h2 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h2><p>cat 跳到最后一页<br>more 回车可翻页<br>less 光标上下浏览</p>\n<h2 id=\"输出当前路径\"><a href=\"#输出当前路径\" class=\"headerlink\" title=\"输出当前路径\"></a>输出当前路径</h2><p>$ pwd (print working directory)</p>"},{"title":"Selenium自动化","date":"2020-04-23T16:00:00.000Z","_content":"\nSelenium自动化\n\n<!--more-->\n\n## 介绍\nSelenium支持多种语言，包括Java、JS和Python等。\n\n## 准备工作\n1. 下载安装Selenium：```$ pip install Selenium```\n2. 下载chromedriver\n\n## 打开测试页面\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome(executable_path='<driver_path>/chromedriver')\ndriver.get(\"<url>\")\n```\n其中```<driver_path>```指的是存放chromedriver的位置，```<url>```是我们要进行测试的页面地址。做完了这一步，运行就可以看到chrome浏览器自动打开到指定的页面了。\n\n## 选择及操作元素\n\n## 其它有用操作\n\n## 可能遇到的问题\niframe\n已打开页面挂载脚本","source":"_posts/selenium.md","raw":"---\ntitle: Selenium自动化\ndate: 2020-04-24\ncategories: Test\ntags: Automation Test\n---\n\nSelenium自动化\n\n<!--more-->\n\n## 介绍\nSelenium支持多种语言，包括Java、JS和Python等。\n\n## 准备工作\n1. 下载安装Selenium：```$ pip install Selenium```\n2. 下载chromedriver\n\n## 打开测试页面\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome(executable_path='<driver_path>/chromedriver')\ndriver.get(\"<url>\")\n```\n其中```<driver_path>```指的是存放chromedriver的位置，```<url>```是我们要进行测试的页面地址。做完了这一步，运行就可以看到chrome浏览器自动打开到指定的页面了。\n\n## 选择及操作元素\n\n## 其它有用操作\n\n## 可能遇到的问题\niframe\n已打开页面挂载脚本","slug":"selenium","published":1,"updated":"2022-02-18T19:33:11.427Z","_id":"ckzsrf1410002zcup14cifb25","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Selenium自动化</p>\n<span id=\"more\"></span>\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Selenium支持多种语言，包括Java、JS和Python等。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载安装Selenium：<code>$ pip install Selenium</code></li>\n<li>下载chromedriver</li>\n</ol>\n<h2 id=\"打开测试页面\"><a href=\"#打开测试页面\" class=\"headerlink\" title=\"打开测试页面\"></a>打开测试页面</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome(executable_path=&#x27;&lt;driver_path&gt;/chromedriver&#x27;)</span><br><span class=\"line\">driver.get(&quot;&lt;url&gt;&quot;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>&lt;driver_path&gt;</code>指的是存放chromedriver的位置，<code>&lt;url&gt;</code>是我们要进行测试的页面地址。做完了这一步，运行就可以看到chrome浏览器自动打开到指定的页面了。</p>\n<h2 id=\"选择及操作元素\"><a href=\"#选择及操作元素\" class=\"headerlink\" title=\"选择及操作元素\"></a>选择及操作元素</h2><h2 id=\"其它有用操作\"><a href=\"#其它有用操作\" class=\"headerlink\" title=\"其它有用操作\"></a>其它有用操作</h2><h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>iframe<br>已打开页面挂载脚本</p>\n","site":{"data":{}},"excerpt":"<p>Selenium自动化</p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Selenium支持多种语言，包括Java、JS和Python等。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>下载安装Selenium：<code>$ pip install Selenium</code></li>\n<li>下载chromedriver</li>\n</ol>\n<h2 id=\"打开测试页面\"><a href=\"#打开测试页面\" class=\"headerlink\" title=\"打开测试页面\"></a>打开测试页面</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome(executable_path=&#x27;&lt;driver_path&gt;/chromedriver&#x27;)</span><br><span class=\"line\">driver.get(&quot;&lt;url&gt;&quot;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>&lt;driver_path&gt;</code>指的是存放chromedriver的位置，<code>&lt;url&gt;</code>是我们要进行测试的页面地址。做完了这一步，运行就可以看到chrome浏览器自动打开到指定的页面了。</p>\n<h2 id=\"选择及操作元素\"><a href=\"#选择及操作元素\" class=\"headerlink\" title=\"选择及操作元素\"></a>选择及操作元素</h2><h2 id=\"其它有用操作\"><a href=\"#其它有用操作\" class=\"headerlink\" title=\"其它有用操作\"></a>其它有用操作</h2><h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>iframe<br>已打开页面挂载脚本</p>"},{"title":"计算机网络基础","date":"2020-04-27T16:00:00.000Z","_content":"\n计算机网络基础\n\n<!--more-->\n\n## OSI 七层网络结构 (Open Systems Interconnection Model)\n7、应用层 (Application Layer)\n\n6、表示层 (Presentation Layer)\n\n5、会话层 (Session Layer)\n\n4、传输层 (Transport Layer)\n\n3、网络层 (Network Layer)\n\n2、数据链路层 (Data Link Layer)\n\n1、物理层 (Physical Layer)\n\n## 常见网络协议\nHTTP (Hyper Text Transfer Protocol) 超文本协议\n应用层，基于TCP/IP。\n\nPOP3 (Post Office Protocol version 3) 邮局协议第三版\nRFC 1939定义。应用层。\n\nIPv4 (Internet Protocol version 4) 互联网通信协议第四版\nRFC 791定义。网络层，无连接的协议。\n\n## IP分类\nIP地址=网络号+主机号，分为A、B、C三类及特殊地址D、E。\n\nA类\n32位地址中第一位必须为0，前一个字节为网络号\n地址范围：1.0.0.1-126.255.255.254\n默认子网掩码：255.0.0.0\n\nB类\n32位地址中前两位必须为10，前两个字节为网络号\n地址范围：128.0.0.1-191.255.255.254\n默认子网掩码：255.255.0.0\n\nC类\n32位地址中前三位必须为110，前三个字节为网络号\n地址范围：192.0.0.1-.223.255.254\n默认子网掩码：255.255.255.0\n\nD类（多播地址）\n32位地址中前四位必须为1110\n地址范围：224.0.0.1-239.255.255.254\n\nE类（保留地址）\n32位地址中前4为必须为1111\n地址范围：240.0.0.1-255.255.255.254\n\n回送地址\n地址范围：127.0.0.1-127.255.255.254","source":"_posts/computer_network_basics copy.md","raw":"---\ntitle: 计算机网络基础\ndate: 2020-04-28\ncategories: Computer Network\ntags: Computer Network\n---\n\n计算机网络基础\n\n<!--more-->\n\n## OSI 七层网络结构 (Open Systems Interconnection Model)\n7、应用层 (Application Layer)\n\n6、表示层 (Presentation Layer)\n\n5、会话层 (Session Layer)\n\n4、传输层 (Transport Layer)\n\n3、网络层 (Network Layer)\n\n2、数据链路层 (Data Link Layer)\n\n1、物理层 (Physical Layer)\n\n## 常见网络协议\nHTTP (Hyper Text Transfer Protocol) 超文本协议\n应用层，基于TCP/IP。\n\nPOP3 (Post Office Protocol version 3) 邮局协议第三版\nRFC 1939定义。应用层。\n\nIPv4 (Internet Protocol version 4) 互联网通信协议第四版\nRFC 791定义。网络层，无连接的协议。\n\n## IP分类\nIP地址=网络号+主机号，分为A、B、C三类及特殊地址D、E。\n\nA类\n32位地址中第一位必须为0，前一个字节为网络号\n地址范围：1.0.0.1-126.255.255.254\n默认子网掩码：255.0.0.0\n\nB类\n32位地址中前两位必须为10，前两个字节为网络号\n地址范围：128.0.0.1-191.255.255.254\n默认子网掩码：255.255.0.0\n\nC类\n32位地址中前三位必须为110，前三个字节为网络号\n地址范围：192.0.0.1-.223.255.254\n默认子网掩码：255.255.255.0\n\nD类（多播地址）\n32位地址中前四位必须为1110\n地址范围：224.0.0.1-239.255.255.254\n\nE类（保留地址）\n32位地址中前4为必须为1111\n地址范围：240.0.0.1-255.255.255.254\n\n回送地址\n地址范围：127.0.0.1-127.255.255.254","slug":"computer_network_basics copy","published":1,"updated":"2022-02-18T19:32:19.559Z","_id":"ckzsrf1430004zcup4tay36dk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>计算机网络基础</p>\n<span id=\"more\"></span>\n\n<h2 id=\"OSI-七层网络结构-Open-Systems-Interconnection-Model\"><a href=\"#OSI-七层网络结构-Open-Systems-Interconnection-Model\" class=\"headerlink\" title=\"OSI 七层网络结构 (Open Systems Interconnection Model)\"></a>OSI 七层网络结构 (Open Systems Interconnection Model)</h2><p>7、应用层 (Application Layer)</p>\n<p>6、表示层 (Presentation Layer)</p>\n<p>5、会话层 (Session Layer)</p>\n<p>4、传输层 (Transport Layer)</p>\n<p>3、网络层 (Network Layer)</p>\n<p>2、数据链路层 (Data Link Layer)</p>\n<p>1、物理层 (Physical Layer)</p>\n<h2 id=\"常见网络协议\"><a href=\"#常见网络协议\" class=\"headerlink\" title=\"常见网络协议\"></a>常见网络协议</h2><p>HTTP (Hyper Text Transfer Protocol) 超文本协议<br>应用层，基于TCP/IP。</p>\n<p>POP3 (Post Office Protocol version 3) 邮局协议第三版<br>RFC 1939定义。应用层。</p>\n<p>IPv4 (Internet Protocol version 4) 互联网通信协议第四版<br>RFC 791定义。网络层，无连接的协议。</p>\n<h2 id=\"IP分类\"><a href=\"#IP分类\" class=\"headerlink\" title=\"IP分类\"></a>IP分类</h2><p>IP地址=网络号+主机号，分为A、B、C三类及特殊地址D、E。</p>\n<p>A类<br>32位地址中第一位必须为0，前一个字节为网络号<br>地址范围：1.0.0.1-126.255.255.254<br>默认子网掩码：255.0.0.0</p>\n<p>B类<br>32位地址中前两位必须为10，前两个字节为网络号<br>地址范围：128.0.0.1-191.255.255.254<br>默认子网掩码：255.255.0.0</p>\n<p>C类<br>32位地址中前三位必须为110，前三个字节为网络号<br>地址范围：192.0.0.1-.223.255.254<br>默认子网掩码：255.255.255.0</p>\n<p>D类（多播地址）<br>32位地址中前四位必须为1110<br>地址范围：224.0.0.1-239.255.255.254</p>\n<p>E类（保留地址）<br>32位地址中前4为必须为1111<br>地址范围：240.0.0.1-255.255.255.254</p>\n<p>回送地址<br>地址范围：127.0.0.1-127.255.255.254</p>\n","site":{"data":{}},"excerpt":"<p>计算机网络基础</p>","more":"<h2 id=\"OSI-七层网络结构-Open-Systems-Interconnection-Model\"><a href=\"#OSI-七层网络结构-Open-Systems-Interconnection-Model\" class=\"headerlink\" title=\"OSI 七层网络结构 (Open Systems Interconnection Model)\"></a>OSI 七层网络结构 (Open Systems Interconnection Model)</h2><p>7、应用层 (Application Layer)</p>\n<p>6、表示层 (Presentation Layer)</p>\n<p>5、会话层 (Session Layer)</p>\n<p>4、传输层 (Transport Layer)</p>\n<p>3、网络层 (Network Layer)</p>\n<p>2、数据链路层 (Data Link Layer)</p>\n<p>1、物理层 (Physical Layer)</p>\n<h2 id=\"常见网络协议\"><a href=\"#常见网络协议\" class=\"headerlink\" title=\"常见网络协议\"></a>常见网络协议</h2><p>HTTP (Hyper Text Transfer Protocol) 超文本协议<br>应用层，基于TCP/IP。</p>\n<p>POP3 (Post Office Protocol version 3) 邮局协议第三版<br>RFC 1939定义。应用层。</p>\n<p>IPv4 (Internet Protocol version 4) 互联网通信协议第四版<br>RFC 791定义。网络层，无连接的协议。</p>\n<h2 id=\"IP分类\"><a href=\"#IP分类\" class=\"headerlink\" title=\"IP分类\"></a>IP分类</h2><p>IP地址=网络号+主机号，分为A、B、C三类及特殊地址D、E。</p>\n<p>A类<br>32位地址中第一位必须为0，前一个字节为网络号<br>地址范围：1.0.0.1-126.255.255.254<br>默认子网掩码：255.0.0.0</p>\n<p>B类<br>32位地址中前两位必须为10，前两个字节为网络号<br>地址范围：128.0.0.1-191.255.255.254<br>默认子网掩码：255.255.0.0</p>\n<p>C类<br>32位地址中前三位必须为110，前三个字节为网络号<br>地址范围：192.0.0.1-.223.255.254<br>默认子网掩码：255.255.255.0</p>\n<p>D类（多播地址）<br>32位地址中前四位必须为1110<br>地址范围：224.0.0.1-239.255.255.254</p>\n<p>E类（保留地址）<br>32位地址中前4为必须为1111<br>地址范围：240.0.0.1-255.255.255.254</p>\n<p>回送地址<br>地址范围：127.0.0.1-127.255.255.254</p>"},{"title":"Hexo+GitHub个人博客部署","date":"2018-11-06T16:00:00.000Z","_content":"\nHexo+GitHub个人博客部署\n\n<!--more-->\n\n## 前置环境及条件\n- git\n- github账号\n- Node.js\n\n## GitHub代码库部署\n在github创建新仓库，取名为xxx.github.io，其中xxx是自己决定的名字，之后xxx.github.io将成为访问个人博客的域名。\n\n## Hexo安装和初始化\nhexo是基于markdown的个人博客框架，使用者编写markdown文章，hexo将自动生成html静态网页文件及相关的css和js等文件。\n\n1. 在命令提示符输入```$ npm install hexo-cli -g```并回车（注意：Node.js配置失败将不能使用```$ npm```命令），接着等待hexo下载完成\n2. 进入想要放置博客项目的位置下，输入```$ hexo init xxx```并回车，其中xxx为博客项目名称,也可以创建好项目空文件夹，进入后直接输入```$ hexo init```。\n3. 在博客项目的位置下打开命令提示符，输入```$ hexo server```运行服务器。在浏览器输入默认地址localhost:4000，如果浏览器显示成功则hexo初始化成功。如果显示localhost发送的响应无效，请检查协议是否为https，若是请改为http。\n\n## Hexo创建博客\n如初始化过程中所说创建好博客项目，则会看到自动创建好的目录结构，其中source和themes是使用者最常用的两个文件夹。\n- source: 存放markdown文件形式的文章，以及图片和视频等资源\n- themes: 存放博客主题，默认为landscape\n\n1. 寻找并设置自己喜欢的主题\n\n    1. 寻找主题\n    在[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html)可以查找，但是这些主题貌似都不是官方设计的，相当于主题商城，只不过都是免费的。所以该网页不直接提供下载链接，只提供演示链接；有两种方法找到下载链接，一种在演示博客中找到github项目的链接；另一种直接在github搜索主题名字。\n\n    2. 下载配置主题\n    将GitHub上对应主题项目克隆到本地项目下themes文件夹中，在_config.yml配置文件中修改主题项目的名称，比如这里使用的是[tufu9441/maupassant-hexo](https://github.com/tufu9441/maupassant-hexo)，修改博客项目根目录下_config.yml：\n    ```\n    # Extensions\n    ## Plugins: https://hexo.io/plugins/\n    ## Themes: https://hexo.io/themes/\n    theme: xxx\n    ```\n    接着就可以通过修改主题文件夹下_config.yml文件（注意不是根目录下的那个）进行个性化设置了，具体操作因不同主题而异，设置规范以主题项目说明为准。\n\n2. 修改_config.yml基本配置\n\n    - 网页基本信息\n    ```\n    # Site\n    title: xxx\n    subtitle:\n    description:\n    keywords:\n    author: xxx\n    language: zh-CN\n    timezone: Asia/Shanghai\n    ```\n\n    - 网页地址\n    ```\n    # URL\n    url: http://xxx.github.io\n    root: /\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    ```\n\n    - GitHub连接\n    ```\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n    type: git\n    repo: https://github.com/xxx/xxx.github.io.git\n    branch: master\n    ```\n    其中repo为GitHub博客项目的位置，比如我的项目位置https://github.com/lotuny/lotuny.github.io.git\n\n3. 生成博客并上传到GitHub\n\n    使用Hexo自动生成静态网页，这里提供了常用命令以便快速查阅。详细文档可查询https://hexo.io/docs/\n\n    - ```$ hexo server```或```$ hexo s```在本地运行服务器预览博客效果\n    - ```$ hexo generate```或```$ hexo g```生成静态网页并建好网站项目\n    - ```$ hexo deploy```或```$ hexo d```将博客网站项目推到GitHub\n\n    **Tip(s)**: generate一定要在deploy之前完成！generate出来的网页文件存放在/public文件夹中，然后deploy才能将public下的所有文件push到GitHub。\n    \n## 避坑指南\n本地Hexo博客项目和GitHub博客项目是不一样的，可以理解为本地Hexo项目包含了GitHub博客项目。这就意味着，如果你想多地保存你的Hexo项目及其markdown文件，请务必将其完整地储存在云端，而依赖deploy自动push得到的代码库（xxx.github.io）是不能反向恢复成Hexo项目的。","source":"_posts/hexo.md","raw":"---\ntitle: Hexo+GitHub个人博客部署\ndate: 2018-11-07\ncategories: _Other\ntags: Blog\n---\n\nHexo+GitHub个人博客部署\n\n<!--more-->\n\n## 前置环境及条件\n- git\n- github账号\n- Node.js\n\n## GitHub代码库部署\n在github创建新仓库，取名为xxx.github.io，其中xxx是自己决定的名字，之后xxx.github.io将成为访问个人博客的域名。\n\n## Hexo安装和初始化\nhexo是基于markdown的个人博客框架，使用者编写markdown文章，hexo将自动生成html静态网页文件及相关的css和js等文件。\n\n1. 在命令提示符输入```$ npm install hexo-cli -g```并回车（注意：Node.js配置失败将不能使用```$ npm```命令），接着等待hexo下载完成\n2. 进入想要放置博客项目的位置下，输入```$ hexo init xxx```并回车，其中xxx为博客项目名称,也可以创建好项目空文件夹，进入后直接输入```$ hexo init```。\n3. 在博客项目的位置下打开命令提示符，输入```$ hexo server```运行服务器。在浏览器输入默认地址localhost:4000，如果浏览器显示成功则hexo初始化成功。如果显示localhost发送的响应无效，请检查协议是否为https，若是请改为http。\n\n## Hexo创建博客\n如初始化过程中所说创建好博客项目，则会看到自动创建好的目录结构，其中source和themes是使用者最常用的两个文件夹。\n- source: 存放markdown文件形式的文章，以及图片和视频等资源\n- themes: 存放博客主题，默认为landscape\n\n1. 寻找并设置自己喜欢的主题\n\n    1. 寻找主题\n    在[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html)可以查找，但是这些主题貌似都不是官方设计的，相当于主题商城，只不过都是免费的。所以该网页不直接提供下载链接，只提供演示链接；有两种方法找到下载链接，一种在演示博客中找到github项目的链接；另一种直接在github搜索主题名字。\n\n    2. 下载配置主题\n    将GitHub上对应主题项目克隆到本地项目下themes文件夹中，在_config.yml配置文件中修改主题项目的名称，比如这里使用的是[tufu9441/maupassant-hexo](https://github.com/tufu9441/maupassant-hexo)，修改博客项目根目录下_config.yml：\n    ```\n    # Extensions\n    ## Plugins: https://hexo.io/plugins/\n    ## Themes: https://hexo.io/themes/\n    theme: xxx\n    ```\n    接着就可以通过修改主题文件夹下_config.yml文件（注意不是根目录下的那个）进行个性化设置了，具体操作因不同主题而异，设置规范以主题项目说明为准。\n\n2. 修改_config.yml基本配置\n\n    - 网页基本信息\n    ```\n    # Site\n    title: xxx\n    subtitle:\n    description:\n    keywords:\n    author: xxx\n    language: zh-CN\n    timezone: Asia/Shanghai\n    ```\n\n    - 网页地址\n    ```\n    # URL\n    url: http://xxx.github.io\n    root: /\n    permalink: :year/:month/:day/:title/\n    permalink_defaults:\n    ```\n\n    - GitHub连接\n    ```\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n    type: git\n    repo: https://github.com/xxx/xxx.github.io.git\n    branch: master\n    ```\n    其中repo为GitHub博客项目的位置，比如我的项目位置https://github.com/lotuny/lotuny.github.io.git\n\n3. 生成博客并上传到GitHub\n\n    使用Hexo自动生成静态网页，这里提供了常用命令以便快速查阅。详细文档可查询https://hexo.io/docs/\n\n    - ```$ hexo server```或```$ hexo s```在本地运行服务器预览博客效果\n    - ```$ hexo generate```或```$ hexo g```生成静态网页并建好网站项目\n    - ```$ hexo deploy```或```$ hexo d```将博客网站项目推到GitHub\n\n    **Tip(s)**: generate一定要在deploy之前完成！generate出来的网页文件存放在/public文件夹中，然后deploy才能将public下的所有文件push到GitHub。\n    \n## 避坑指南\n本地Hexo博客项目和GitHub博客项目是不一样的，可以理解为本地Hexo项目包含了GitHub博客项目。这就意味着，如果你想多地保存你的Hexo项目及其markdown文件，请务必将其完整地储存在云端，而依赖deploy自动push得到的代码库（xxx.github.io）是不能反向恢复成Hexo项目的。","slug":"hexo","published":1,"updated":"2022-02-18T19:42:29.839Z","_id":"ckzsrfl500000u8up3x3bg07e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hexo+GitHub个人博客部署</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前置环境及条件\"><a href=\"#前置环境及条件\" class=\"headerlink\" title=\"前置环境及条件\"></a>前置环境及条件</h2><ul>\n<li>git</li>\n<li>github账号</li>\n<li>Node.js</li>\n</ul>\n<h2 id=\"GitHub代码库部署\"><a href=\"#GitHub代码库部署\" class=\"headerlink\" title=\"GitHub代码库部署\"></a>GitHub代码库部署</h2><p>在github创建新仓库，取名为xxx.github.io，其中xxx是自己决定的名字，之后xxx.github.io将成为访问个人博客的域名。</p>\n<h2 id=\"Hexo安装和初始化\"><a href=\"#Hexo安装和初始化\" class=\"headerlink\" title=\"Hexo安装和初始化\"></a>Hexo安装和初始化</h2><p>hexo是基于markdown的个人博客框架，使用者编写markdown文章，hexo将自动生成html静态网页文件及相关的css和js等文件。</p>\n<ol>\n<li>在命令提示符输入<code>$ npm install hexo-cli -g</code>并回车（注意：Node.js配置失败将不能使用<code>$ npm</code>命令），接着等待hexo下载完成</li>\n<li>进入想要放置博客项目的位置下，输入<code>$ hexo init xxx</code>并回车，其中xxx为博客项目名称,也可以创建好项目空文件夹，进入后直接输入<code>$ hexo init</code>。</li>\n<li>在博客项目的位置下打开命令提示符，输入<code>$ hexo server</code>运行服务器。在浏览器输入默认地址localhost:4000，如果浏览器显示成功则hexo初始化成功。如果显示localhost发送的响应无效，请检查协议是否为https，若是请改为http。</li>\n</ol>\n<h2 id=\"Hexo创建博客\"><a href=\"#Hexo创建博客\" class=\"headerlink\" title=\"Hexo创建博客\"></a>Hexo创建博客</h2><p>如初始化过程中所说创建好博客项目，则会看到自动创建好的目录结构，其中source和themes是使用者最常用的两个文件夹。</p>\n<ul>\n<li>source: 存放markdown文件形式的文章，以及图片和视频等资源</li>\n<li>themes: 存放博客主题，默认为landscape</li>\n</ul>\n<ol>\n<li><p>寻找并设置自己喜欢的主题</p>\n<ol>\n<li><p>寻找主题<br>在<a href=\"https://hexo.io/themes/index.html\">https://hexo.io/themes/index.html</a>可以查找，但是这些主题貌似都不是官方设计的，相当于主题商城，只不过都是免费的。所以该网页不直接提供下载链接，只提供演示链接；有两种方法找到下载链接，一种在演示博客中找到github项目的链接；另一种直接在github搜索主题名字。</p>\n</li>\n<li><p>下载配置主题<br>将GitHub上对应主题项目克隆到本地项目下themes文件夹中，在_config.yml配置文件中修改主题项目的名称，比如这里使用的是<a href=\"https://github.com/tufu9441/maupassant-hexo\">tufu9441/maupassant-hexo</a>，修改博客项目根目录下_config.yml：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: xxx</span><br></pre></td></tr></table></figure>\n<p>接着就可以通过修改主题文件夹下_config.yml文件（注意不是根目录下的那个）进行个性化设置了，具体操作因不同主题而异，设置规范以主题项目说明为准。</p>\n</li>\n</ol>\n</li>\n<li><p>修改_config.yml基本配置</p>\n<ul>\n<li><p>网页基本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: xxx</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xxx</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure></li>\n<li><p>网页地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">url: http://xxx.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></li>\n<li><p>GitHub连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/xxx/xxx.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>其中repo为GitHub博客项目的位置，比如我的项目位置<a href=\"https://github.com/lotuny/lotuny.github.io.git\">https://github.com/lotuny/lotuny.github.io.git</a></p>\n</li>\n</ul>\n</li>\n<li><p>生成博客并上传到GitHub</p>\n<p> 使用Hexo自动生成静态网页，这里提供了常用命令以便快速查阅。详细文档可查询<a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<ul>\n<li><code>$ hexo server</code>或<code>$ hexo s</code>在本地运行服务器预览博客效果</li>\n<li><code>$ hexo generate</code>或<code>$ hexo g</code>生成静态网页并建好网站项目</li>\n<li><code>$ hexo deploy</code>或<code>$ hexo d</code>将博客网站项目推到GitHub</li>\n</ul>\n<p> <strong>Tip(s)</strong>: generate一定要在deploy之前完成！generate出来的网页文件存放在/public文件夹中，然后deploy才能将public下的所有文件push到GitHub。</p>\n</li>\n</ol>\n<h2 id=\"避坑指南\"><a href=\"#避坑指南\" class=\"headerlink\" title=\"避坑指南\"></a>避坑指南</h2><p>本地Hexo博客项目和GitHub博客项目是不一样的，可以理解为本地Hexo项目包含了GitHub博客项目。这就意味着，如果你想多地保存你的Hexo项目及其markdown文件，请务必将其完整地储存在云端，而依赖deploy自动push得到的代码库（xxx.github.io）是不能反向恢复成Hexo项目的。</p>\n","site":{"data":{}},"excerpt":"<p>Hexo+GitHub个人博客部署</p>","more":"<h2 id=\"前置环境及条件\"><a href=\"#前置环境及条件\" class=\"headerlink\" title=\"前置环境及条件\"></a>前置环境及条件</h2><ul>\n<li>git</li>\n<li>github账号</li>\n<li>Node.js</li>\n</ul>\n<h2 id=\"GitHub代码库部署\"><a href=\"#GitHub代码库部署\" class=\"headerlink\" title=\"GitHub代码库部署\"></a>GitHub代码库部署</h2><p>在github创建新仓库，取名为xxx.github.io，其中xxx是自己决定的名字，之后xxx.github.io将成为访问个人博客的域名。</p>\n<h2 id=\"Hexo安装和初始化\"><a href=\"#Hexo安装和初始化\" class=\"headerlink\" title=\"Hexo安装和初始化\"></a>Hexo安装和初始化</h2><p>hexo是基于markdown的个人博客框架，使用者编写markdown文章，hexo将自动生成html静态网页文件及相关的css和js等文件。</p>\n<ol>\n<li>在命令提示符输入<code>$ npm install hexo-cli -g</code>并回车（注意：Node.js配置失败将不能使用<code>$ npm</code>命令），接着等待hexo下载完成</li>\n<li>进入想要放置博客项目的位置下，输入<code>$ hexo init xxx</code>并回车，其中xxx为博客项目名称,也可以创建好项目空文件夹，进入后直接输入<code>$ hexo init</code>。</li>\n<li>在博客项目的位置下打开命令提示符，输入<code>$ hexo server</code>运行服务器。在浏览器输入默认地址localhost:4000，如果浏览器显示成功则hexo初始化成功。如果显示localhost发送的响应无效，请检查协议是否为https，若是请改为http。</li>\n</ol>\n<h2 id=\"Hexo创建博客\"><a href=\"#Hexo创建博客\" class=\"headerlink\" title=\"Hexo创建博客\"></a>Hexo创建博客</h2><p>如初始化过程中所说创建好博客项目，则会看到自动创建好的目录结构，其中source和themes是使用者最常用的两个文件夹。</p>\n<ul>\n<li>source: 存放markdown文件形式的文章，以及图片和视频等资源</li>\n<li>themes: 存放博客主题，默认为landscape</li>\n</ul>\n<ol>\n<li><p>寻找并设置自己喜欢的主题</p>\n<ol>\n<li><p>寻找主题<br>在<a href=\"https://hexo.io/themes/index.html\">https://hexo.io/themes/index.html</a>可以查找，但是这些主题貌似都不是官方设计的，相当于主题商城，只不过都是免费的。所以该网页不直接提供下载链接，只提供演示链接；有两种方法找到下载链接，一种在演示博客中找到github项目的链接；另一种直接在github搜索主题名字。</p>\n</li>\n<li><p>下载配置主题<br>将GitHub上对应主题项目克隆到本地项目下themes文件夹中，在_config.yml配置文件中修改主题项目的名称，比如这里使用的是<a href=\"https://github.com/tufu9441/maupassant-hexo\">tufu9441/maupassant-hexo</a>，修改博客项目根目录下_config.yml：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: xxx</span><br></pre></td></tr></table></figure>\n<p>接着就可以通过修改主题文件夹下_config.yml文件（注意不是根目录下的那个）进行个性化设置了，具体操作因不同主题而异，设置规范以主题项目说明为准。</p>\n</li>\n</ol>\n</li>\n<li><p>修改_config.yml基本配置</p>\n<ul>\n<li><p>网页基本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: xxx</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xxx</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure></li>\n<li><p>网页地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">url: http://xxx.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></li>\n<li><p>GitHub连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/xxx/xxx.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>其中repo为GitHub博客项目的位置，比如我的项目位置<a href=\"https://github.com/lotuny/lotuny.github.io.git\">https://github.com/lotuny/lotuny.github.io.git</a></p>\n</li>\n</ul>\n</li>\n<li><p>生成博客并上传到GitHub</p>\n<p> 使用Hexo自动生成静态网页，这里提供了常用命令以便快速查阅。详细文档可查询<a href=\"https://hexo.io/docs/\">https://hexo.io/docs/</a></p>\n<ul>\n<li><code>$ hexo server</code>或<code>$ hexo s</code>在本地运行服务器预览博客效果</li>\n<li><code>$ hexo generate</code>或<code>$ hexo g</code>生成静态网页并建好网站项目</li>\n<li><code>$ hexo deploy</code>或<code>$ hexo d</code>将博客网站项目推到GitHub</li>\n</ul>\n<p> <strong>Tip(s)</strong>: generate一定要在deploy之前完成！generate出来的网页文件存放在/public文件夹中，然后deploy才能将public下的所有文件push到GitHub。</p>\n</li>\n</ol>\n<h2 id=\"避坑指南\"><a href=\"#避坑指南\" class=\"headerlink\" title=\"避坑指南\"></a>避坑指南</h2><p>本地Hexo博客项目和GitHub博客项目是不一样的，可以理解为本地Hexo项目包含了GitHub博客项目。这就意味着，如果你想多地保存你的Hexo项目及其markdown文件，请务必将其完整地储存在云端，而依赖deploy自动push得到的代码库（xxx.github.io）是不能反向恢复成Hexo项目的。</p>"},{"title":"分布式聊天系统(Web部分)","date":"2020-04-21T16:00:00.000Z","_content":"\n最近和几个同学刚做完一个为期大半年的分布式聊天系统项目，于是有一些些心得想要记录下来。可能会有些又臭又长，想大致了解的话重点看消息加密设计和实现就好了。最后附上项目链接。\n\n<!--more-->\n\n## 设计\n\n聊天系统就是像我们常用的QQ、微信这些。而我们的分布式聊天系统主要包括三个部分：数据库服务端、Web客户端和Android客户端。理想状态下，服务端和Web客户端各部署在独立的两台服务器上，Android客户端则被打包成app安装于用户手机上。但是为了方便合作和互相监管，我们将这三部分分别写作了项目下的三个模块。\n我们主要的通讯思路是服务端和客户端之间通过websocket协议传输json文件，文件包含对数据库读写的请求。具体可以查看我们项目的Wiki，这里就不赘述了。因为我主要负责的是Web客户端的实现，所以这篇文章主要也会详讲这一部分的结构和遇到的问题。如果真的对我们整个系统感兴趣的话，项目库里面也是有具体的报告，在final_report_latex下。\n\n## 需求及功能\n\n### 已实现功能\n- 注册登录\n    注册时检查sql注入，要求密码包含三种类型字符等，如不符合要求将拒绝注册；发送注册请求前对密码进行md5哈希计算，保证服务端无法获取原密码；由于本项目消息加密的实现使得私钥只储存于注册设备，所以目前登录只允许注册账号的设备登录该账号。Web客户端发起登录请求前将首先检查本地内存localStorage是否存在相关私钥（私钥不参与登录验证过程，但是和消息加解密有关）。\n\n- 用户搜索及添加\n    本项目发起聊天不需要经过对方同意，更类似于陌生人聊天室，可以通过搜索功能找到符合搜索关键词模式的所有用户，并生成新的聊天窗口，聊天窗口不会保留至下次登录，聊天记录也不会保存至本地。\n\n- 双方消息加密\n    用户聊天内容的私密性要进行保护。和国内常见聊天软件不一样的是，我们的项目更强调端对端的消息加密和用户的隐私保护，也即服务端无法获取用户实际聊天内容，只储存加密后的消息，并且不直接储存用户密钥。\n\n    我们采用AES+Diffie-Hellman的结合实现信息加密。基本设计是：首先每个用户在新注册时都会本地生成新的密钥对（符合Diffie-Hellman交换规则），并将公钥进行Base64编码发送至服务端保存，这个密钥对将用来计算两方共同密钥 Shared Secret 进行AES的对称加解密。\n\n- 历史记录获取\n    这其实就是一个请求查询数据库的过程，Web端的主要处理是在得到消息后进行解密并根据时间排序以及呈现。这里发生过一个有趣的问题，就是时区的问题，当时我们几个人在不同的地区（一些人由于疫情提前回家了），所以当我们远程连接数据库的时候发现消息时间出现了不一致，也就导致消息展现顺序错乱。后来我们的解决方法也很简单粗暴，就是直接改服务端的系统时间[笑哭.jpg]，毕竟赶时间。当然实际还有更细致的解决方法，我目前能想到的就是直接储存1970年1月1日至今经过的时间数，客户端在接收到时间后再根据系统时区进行转换。\n\n### 可扩展功能\n- 不限字数长度的聊天消息，需要解决数据库储存、JSON请求长度等问题；\n- 消息类型增加emoji、图片、视频和文档；\n- 群组聊天多方加密；\n\n## 加密算法\n\n### AES对称加密\n\n首先大家都知道密码算法按照密钥特点分为两种：对称加密和非对称加密。其中对称加密比较常见的是AES算法和DES算法，非对称加密则是RSA算法和ECC算法。\n\n我们选择对称加密来加解密消息的原因一个是非对称加密的效率比较低下，另一个是一条非对称加密后生成密文只能被接收方解密成明文，就连发送方也无法解密，这会造成历史记录获取失败，除非发送方每次都推一条重复的消息（用自己的公钥加密）到服务端数据库。\n\n说完了选择对称加密的原因，我们再来了解一下AES算法，维基百科里说的很详细这里就不多赘述，简而言之就是一系列不太复杂的逻辑操作但是我脑子记不住。我以前学密码学的时候做过实现AES的Java程序，过不久就忘得一干二净。我觉得大概理解了就差不多了，毕竟我们搞开发又不是做研究，重点还是应该放在API调用上。这里我用的是CryptoJS的AES-256-CBC，其中256指的是单位为bit的密钥长度，CBC是块加密模式。\n\n加密还有一种分法，就是分为流加密和块加密，其中流加密的密钥随机生成并且长度和明文一致，按位（bit）计算，而且为了保证安全性要求密钥每次都不一样的，这显然不能用在我们的项目里；同时AES算法则属于密钥长度确定的块加密，其实不管是流加密还是块加密都要求密钥长度和明文长度一致，但块加密的解决方案是将过长的原文拆分成一块块，每块长度与密钥长度一致，不足的使用一定填充模式进行填充，本项目使用的是Pkcs7填充，CryptoJS默认也是这个模式。\n\n前面提到的CBC (Cipher Book Chaining)则是块加密模式的一种，中文称为密文分组链接模式，块加密模式定义了块之间是如何合作产生最终密文的。在CBC加密模式中，我们要首先定义一个不需要很长的IV (Initialization Vector)初始化向量，这个向量只用一次，就是与第一块明文进行XOR运算，然后用密钥对混淆过的第一块明文进行加密，生成第一块密文，紧接着每块密文又会成为下一块明文的“IV”，直到所有明文块都生成对应的密文块。一般而言每次加密都会生成不一样的IV，使得即便同一段明文也总会生成不一样的密文，防止攻击者使用选择明文攻击法。\n\n### Diffie-Hellman密钥交换协议\n\n前面说到我们用AES对称加密算法来加密消息，但我们发现还有问题，那就是我们要怎么安全地传输对称密钥呢？要怎么储存已生成的对称密钥呢？\n\n那有没有安全的通信通道或者我们用非对称加密对密钥再加密一次？从维基百科的介绍中我们可以大致理解到：目前并没有真正的、第三方无法接触的安全通信通道（也许以后量子网络能做到），都是使用了一些技巧，就像是魔术师的障眼法。后者理论上能阻止第三方得到对称密钥（作为非对称加密的明文），但密钥储存的问题也还是没有解决：因为密钥不能放在服务端的话就只能放在客户端，这就会给客户端造成十分大的压力，尤其是当聊天对象增多以后。\n\n那有没有什么办法能在不安全的通道中安全地传递密钥呢？有人看到这里可能就要说我在想peach或者劝我吃花生米了，但你别说，还真有，就是Diffie-Hellman密钥交换协议。不过如果非要抠字眼的话，这协议并不是传递密钥，而是通过传递中间物进一步计算出密钥（Shared Secret）。\n\n这里我们又要请出我们的老伙计维基百科了，里面用了一个颜料叠加的形象例子，好像中文界面就没有这个图。简单来说，就是Alice和Bob分别用自己的私钥和一个提前约定好的数g进行计算，计算结果告知对方，这个计算结果就是我前面所说的双方传递的中间物。然后双方拿到对方的中间物再和自己的私钥进行计算，这样两个人就能得到一致的结果了，就是Alice.private_key + g + Bob.private_key（这里的+不是四则运算里的加法，其实是mod取余，除数记为p是预先设定好的质数），你会发现这不就是结合律吗？\n\n这个协议要统一g和p这两个数，其中p要是很大的质数，并且这两个数都不是需要保密的对象，也就不用担心泄露。涉及到的计算利用了著名的离散对数问题，也即在知道(a^k) mod p = b这个式子中的a, p, b的时候无法高效计算出k值的问题，当然前提p得是个大质数。\n\n## Web客户端\n\n- JS运行时：Node.js 6.13.4\n- JS框架：Vue 2.6.10 + Element 2.13.0\n- 加密算法库：Diffie-Hellman密钥交换协议（Crypto 1.0.1）; \n- AES对称加密（CryptoJS 2.1.3）\n- 其它：WebSocket\n\nNode.js是异步事件驱动的JavaScript运行时，所谓运行时其实就是程序的依赖库，异步事件就是指被调用的异步函数不管任务是否完成都立即返回，运行的线程不被挂起继续进行下一个语句，而该异步函数完成任务后会进行回调（即通知调用的线程）。提到Node.js又不得不提一下npm (Node Package Manager),这是非常实用的node包管理器，只需要```$ npm install <package-name>```就可以把许多主流的JS依赖包下载到项目中来。\n\nVue提供了响应式和组件化的视图组件，响应式指的是网页在移动设备端打开时可以自适应设备屏幕分辨率和尺寸，优化用户体验；组件化指的是将可能重复出现的视图封装成可重复调用的自定义组件。Vue将组件写成.vue文件，并在上层页面中使用标签进行调用（e.g. 程序员写了一个名为co-example.vue的组件，调用时使用```<co-example></co-example>```）。Element是基于vue的ui库，说实话当时是随便找的，后来才知道是饿了么的UI，总的来说还不错吧，挺多有用的小组件，颜色主题的想法我也挺喜欢的。不过一定要说的话，有一个小问题就是Layout布局中只有列间距没有行间距的参数。\n\n然后是加密算法库。当然了，这个项目肯定不止用了加密算法的库，只不过信息加密是聊天系统十分重要的一点，所以这两个加密算法库就单独拿出来讲讲。我们使用了Diffie-Hellman密钥交换协议和AES对称加密，其中Crypto是Node.js原生库，我们原计划用它来实现加密的整个流程，只是由于某些尚不清楚的原因，Crypto的AES相关函数无法被找到进行调用，不得以我们又用了另一个加密算法库CryptoJS。又因为CryptoJS只实现了加解密算法，并没有实现Diffie-Hellman，我们最终采用了二者共用的策略。密钥交换协议和对称加密这两者在该项目中缺一不可，具体会在后面提到。\n\n“WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层”。WebSocket被我们用来进行客户端和服务端之间的通信，因为是全双工，所以两端可以双向同时传输消息，并且建立连接后可以持续通信。","source":"_posts/chat_system_web.md","raw":"---\ntitle: 分布式聊天系统(Web部分)\ndate: 2020-04-22\ncategories: Application\ntags: Web\n---\n\n最近和几个同学刚做完一个为期大半年的分布式聊天系统项目，于是有一些些心得想要记录下来。可能会有些又臭又长，想大致了解的话重点看消息加密设计和实现就好了。最后附上项目链接。\n\n<!--more-->\n\n## 设计\n\n聊天系统就是像我们常用的QQ、微信这些。而我们的分布式聊天系统主要包括三个部分：数据库服务端、Web客户端和Android客户端。理想状态下，服务端和Web客户端各部署在独立的两台服务器上，Android客户端则被打包成app安装于用户手机上。但是为了方便合作和互相监管，我们将这三部分分别写作了项目下的三个模块。\n我们主要的通讯思路是服务端和客户端之间通过websocket协议传输json文件，文件包含对数据库读写的请求。具体可以查看我们项目的Wiki，这里就不赘述了。因为我主要负责的是Web客户端的实现，所以这篇文章主要也会详讲这一部分的结构和遇到的问题。如果真的对我们整个系统感兴趣的话，项目库里面也是有具体的报告，在final_report_latex下。\n\n## 需求及功能\n\n### 已实现功能\n- 注册登录\n    注册时检查sql注入，要求密码包含三种类型字符等，如不符合要求将拒绝注册；发送注册请求前对密码进行md5哈希计算，保证服务端无法获取原密码；由于本项目消息加密的实现使得私钥只储存于注册设备，所以目前登录只允许注册账号的设备登录该账号。Web客户端发起登录请求前将首先检查本地内存localStorage是否存在相关私钥（私钥不参与登录验证过程，但是和消息加解密有关）。\n\n- 用户搜索及添加\n    本项目发起聊天不需要经过对方同意，更类似于陌生人聊天室，可以通过搜索功能找到符合搜索关键词模式的所有用户，并生成新的聊天窗口，聊天窗口不会保留至下次登录，聊天记录也不会保存至本地。\n\n- 双方消息加密\n    用户聊天内容的私密性要进行保护。和国内常见聊天软件不一样的是，我们的项目更强调端对端的消息加密和用户的隐私保护，也即服务端无法获取用户实际聊天内容，只储存加密后的消息，并且不直接储存用户密钥。\n\n    我们采用AES+Diffie-Hellman的结合实现信息加密。基本设计是：首先每个用户在新注册时都会本地生成新的密钥对（符合Diffie-Hellman交换规则），并将公钥进行Base64编码发送至服务端保存，这个密钥对将用来计算两方共同密钥 Shared Secret 进行AES的对称加解密。\n\n- 历史记录获取\n    这其实就是一个请求查询数据库的过程，Web端的主要处理是在得到消息后进行解密并根据时间排序以及呈现。这里发生过一个有趣的问题，就是时区的问题，当时我们几个人在不同的地区（一些人由于疫情提前回家了），所以当我们远程连接数据库的时候发现消息时间出现了不一致，也就导致消息展现顺序错乱。后来我们的解决方法也很简单粗暴，就是直接改服务端的系统时间[笑哭.jpg]，毕竟赶时间。当然实际还有更细致的解决方法，我目前能想到的就是直接储存1970年1月1日至今经过的时间数，客户端在接收到时间后再根据系统时区进行转换。\n\n### 可扩展功能\n- 不限字数长度的聊天消息，需要解决数据库储存、JSON请求长度等问题；\n- 消息类型增加emoji、图片、视频和文档；\n- 群组聊天多方加密；\n\n## 加密算法\n\n### AES对称加密\n\n首先大家都知道密码算法按照密钥特点分为两种：对称加密和非对称加密。其中对称加密比较常见的是AES算法和DES算法，非对称加密则是RSA算法和ECC算法。\n\n我们选择对称加密来加解密消息的原因一个是非对称加密的效率比较低下，另一个是一条非对称加密后生成密文只能被接收方解密成明文，就连发送方也无法解密，这会造成历史记录获取失败，除非发送方每次都推一条重复的消息（用自己的公钥加密）到服务端数据库。\n\n说完了选择对称加密的原因，我们再来了解一下AES算法，维基百科里说的很详细这里就不多赘述，简而言之就是一系列不太复杂的逻辑操作但是我脑子记不住。我以前学密码学的时候做过实现AES的Java程序，过不久就忘得一干二净。我觉得大概理解了就差不多了，毕竟我们搞开发又不是做研究，重点还是应该放在API调用上。这里我用的是CryptoJS的AES-256-CBC，其中256指的是单位为bit的密钥长度，CBC是块加密模式。\n\n加密还有一种分法，就是分为流加密和块加密，其中流加密的密钥随机生成并且长度和明文一致，按位（bit）计算，而且为了保证安全性要求密钥每次都不一样的，这显然不能用在我们的项目里；同时AES算法则属于密钥长度确定的块加密，其实不管是流加密还是块加密都要求密钥长度和明文长度一致，但块加密的解决方案是将过长的原文拆分成一块块，每块长度与密钥长度一致，不足的使用一定填充模式进行填充，本项目使用的是Pkcs7填充，CryptoJS默认也是这个模式。\n\n前面提到的CBC (Cipher Book Chaining)则是块加密模式的一种，中文称为密文分组链接模式，块加密模式定义了块之间是如何合作产生最终密文的。在CBC加密模式中，我们要首先定义一个不需要很长的IV (Initialization Vector)初始化向量，这个向量只用一次，就是与第一块明文进行XOR运算，然后用密钥对混淆过的第一块明文进行加密，生成第一块密文，紧接着每块密文又会成为下一块明文的“IV”，直到所有明文块都生成对应的密文块。一般而言每次加密都会生成不一样的IV，使得即便同一段明文也总会生成不一样的密文，防止攻击者使用选择明文攻击法。\n\n### Diffie-Hellman密钥交换协议\n\n前面说到我们用AES对称加密算法来加密消息，但我们发现还有问题，那就是我们要怎么安全地传输对称密钥呢？要怎么储存已生成的对称密钥呢？\n\n那有没有安全的通信通道或者我们用非对称加密对密钥再加密一次？从维基百科的介绍中我们可以大致理解到：目前并没有真正的、第三方无法接触的安全通信通道（也许以后量子网络能做到），都是使用了一些技巧，就像是魔术师的障眼法。后者理论上能阻止第三方得到对称密钥（作为非对称加密的明文），但密钥储存的问题也还是没有解决：因为密钥不能放在服务端的话就只能放在客户端，这就会给客户端造成十分大的压力，尤其是当聊天对象增多以后。\n\n那有没有什么办法能在不安全的通道中安全地传递密钥呢？有人看到这里可能就要说我在想peach或者劝我吃花生米了，但你别说，还真有，就是Diffie-Hellman密钥交换协议。不过如果非要抠字眼的话，这协议并不是传递密钥，而是通过传递中间物进一步计算出密钥（Shared Secret）。\n\n这里我们又要请出我们的老伙计维基百科了，里面用了一个颜料叠加的形象例子，好像中文界面就没有这个图。简单来说，就是Alice和Bob分别用自己的私钥和一个提前约定好的数g进行计算，计算结果告知对方，这个计算结果就是我前面所说的双方传递的中间物。然后双方拿到对方的中间物再和自己的私钥进行计算，这样两个人就能得到一致的结果了，就是Alice.private_key + g + Bob.private_key（这里的+不是四则运算里的加法，其实是mod取余，除数记为p是预先设定好的质数），你会发现这不就是结合律吗？\n\n这个协议要统一g和p这两个数，其中p要是很大的质数，并且这两个数都不是需要保密的对象，也就不用担心泄露。涉及到的计算利用了著名的离散对数问题，也即在知道(a^k) mod p = b这个式子中的a, p, b的时候无法高效计算出k值的问题，当然前提p得是个大质数。\n\n## Web客户端\n\n- JS运行时：Node.js 6.13.4\n- JS框架：Vue 2.6.10 + Element 2.13.0\n- 加密算法库：Diffie-Hellman密钥交换协议（Crypto 1.0.1）; \n- AES对称加密（CryptoJS 2.1.3）\n- 其它：WebSocket\n\nNode.js是异步事件驱动的JavaScript运行时，所谓运行时其实就是程序的依赖库，异步事件就是指被调用的异步函数不管任务是否完成都立即返回，运行的线程不被挂起继续进行下一个语句，而该异步函数完成任务后会进行回调（即通知调用的线程）。提到Node.js又不得不提一下npm (Node Package Manager),这是非常实用的node包管理器，只需要```$ npm install <package-name>```就可以把许多主流的JS依赖包下载到项目中来。\n\nVue提供了响应式和组件化的视图组件，响应式指的是网页在移动设备端打开时可以自适应设备屏幕分辨率和尺寸，优化用户体验；组件化指的是将可能重复出现的视图封装成可重复调用的自定义组件。Vue将组件写成.vue文件，并在上层页面中使用标签进行调用（e.g. 程序员写了一个名为co-example.vue的组件，调用时使用```<co-example></co-example>```）。Element是基于vue的ui库，说实话当时是随便找的，后来才知道是饿了么的UI，总的来说还不错吧，挺多有用的小组件，颜色主题的想法我也挺喜欢的。不过一定要说的话，有一个小问题就是Layout布局中只有列间距没有行间距的参数。\n\n然后是加密算法库。当然了，这个项目肯定不止用了加密算法的库，只不过信息加密是聊天系统十分重要的一点，所以这两个加密算法库就单独拿出来讲讲。我们使用了Diffie-Hellman密钥交换协议和AES对称加密，其中Crypto是Node.js原生库，我们原计划用它来实现加密的整个流程，只是由于某些尚不清楚的原因，Crypto的AES相关函数无法被找到进行调用，不得以我们又用了另一个加密算法库CryptoJS。又因为CryptoJS只实现了加解密算法，并没有实现Diffie-Hellman，我们最终采用了二者共用的策略。密钥交换协议和对称加密这两者在该项目中缺一不可，具体会在后面提到。\n\n“WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层”。WebSocket被我们用来进行客户端和服务端之间的通信，因为是全双工，所以两端可以双向同时传输消息，并且建立连接后可以持续通信。","slug":"chat_system_web","published":1,"updated":"2022-02-18T19:27:31.879Z","_id":"ckzsrknm00008u8up54od2aoo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近和几个同学刚做完一个为期大半年的分布式聊天系统项目，于是有一些些心得想要记录下来。可能会有些又臭又长，想大致了解的话重点看消息加密设计和实现就好了。最后附上项目链接。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>聊天系统就是像我们常用的QQ、微信这些。而我们的分布式聊天系统主要包括三个部分：数据库服务端、Web客户端和Android客户端。理想状态下，服务端和Web客户端各部署在独立的两台服务器上，Android客户端则被打包成app安装于用户手机上。但是为了方便合作和互相监管，我们将这三部分分别写作了项目下的三个模块。<br>我们主要的通讯思路是服务端和客户端之间通过websocket协议传输json文件，文件包含对数据库读写的请求。具体可以查看我们项目的Wiki，这里就不赘述了。因为我主要负责的是Web客户端的实现，所以这篇文章主要也会详讲这一部分的结构和遇到的问题。如果真的对我们整个系统感兴趣的话，项目库里面也是有具体的报告，在final_report_latex下。</p>\n<h2 id=\"需求及功能\"><a href=\"#需求及功能\" class=\"headerlink\" title=\"需求及功能\"></a>需求及功能</h2><h3 id=\"已实现功能\"><a href=\"#已实现功能\" class=\"headerlink\" title=\"已实现功能\"></a>已实现功能</h3><ul>\n<li><p>注册登录<br>  注册时检查sql注入，要求密码包含三种类型字符等，如不符合要求将拒绝注册；发送注册请求前对密码进行md5哈希计算，保证服务端无法获取原密码；由于本项目消息加密的实现使得私钥只储存于注册设备，所以目前登录只允许注册账号的设备登录该账号。Web客户端发起登录请求前将首先检查本地内存localStorage是否存在相关私钥（私钥不参与登录验证过程，但是和消息加解密有关）。</p>\n</li>\n<li><p>用户搜索及添加<br>  本项目发起聊天不需要经过对方同意，更类似于陌生人聊天室，可以通过搜索功能找到符合搜索关键词模式的所有用户，并生成新的聊天窗口，聊天窗口不会保留至下次登录，聊天记录也不会保存至本地。</p>\n</li>\n<li><p>双方消息加密<br>  用户聊天内容的私密性要进行保护。和国内常见聊天软件不一样的是，我们的项目更强调端对端的消息加密和用户的隐私保护，也即服务端无法获取用户实际聊天内容，只储存加密后的消息，并且不直接储存用户密钥。</p>\n<p>  我们采用AES+Diffie-Hellman的结合实现信息加密。基本设计是：首先每个用户在新注册时都会本地生成新的密钥对（符合Diffie-Hellman交换规则），并将公钥进行Base64编码发送至服务端保存，这个密钥对将用来计算两方共同密钥 Shared Secret 进行AES的对称加解密。</p>\n</li>\n<li><p>历史记录获取<br>  这其实就是一个请求查询数据库的过程，Web端的主要处理是在得到消息后进行解密并根据时间排序以及呈现。这里发生过一个有趣的问题，就是时区的问题，当时我们几个人在不同的地区（一些人由于疫情提前回家了），所以当我们远程连接数据库的时候发现消息时间出现了不一致，也就导致消息展现顺序错乱。后来我们的解决方法也很简单粗暴，就是直接改服务端的系统时间[笑哭.jpg]，毕竟赶时间。当然实际还有更细致的解决方法，我目前能想到的就是直接储存1970年1月1日至今经过的时间数，客户端在接收到时间后再根据系统时区进行转换。</p>\n</li>\n</ul>\n<h3 id=\"可扩展功能\"><a href=\"#可扩展功能\" class=\"headerlink\" title=\"可扩展功能\"></a>可扩展功能</h3><ul>\n<li>不限字数长度的聊天消息，需要解决数据库储存、JSON请求长度等问题；</li>\n<li>消息类型增加emoji、图片、视频和文档；</li>\n<li>群组聊天多方加密；</li>\n</ul>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><h3 id=\"AES对称加密\"><a href=\"#AES对称加密\" class=\"headerlink\" title=\"AES对称加密\"></a>AES对称加密</h3><p>首先大家都知道密码算法按照密钥特点分为两种：对称加密和非对称加密。其中对称加密比较常见的是AES算法和DES算法，非对称加密则是RSA算法和ECC算法。</p>\n<p>我们选择对称加密来加解密消息的原因一个是非对称加密的效率比较低下，另一个是一条非对称加密后生成密文只能被接收方解密成明文，就连发送方也无法解密，这会造成历史记录获取失败，除非发送方每次都推一条重复的消息（用自己的公钥加密）到服务端数据库。</p>\n<p>说完了选择对称加密的原因，我们再来了解一下AES算法，维基百科里说的很详细这里就不多赘述，简而言之就是一系列不太复杂的逻辑操作但是我脑子记不住。我以前学密码学的时候做过实现AES的Java程序，过不久就忘得一干二净。我觉得大概理解了就差不多了，毕竟我们搞开发又不是做研究，重点还是应该放在API调用上。这里我用的是CryptoJS的AES-256-CBC，其中256指的是单位为bit的密钥长度，CBC是块加密模式。</p>\n<p>加密还有一种分法，就是分为流加密和块加密，其中流加密的密钥随机生成并且长度和明文一致，按位（bit）计算，而且为了保证安全性要求密钥每次都不一样的，这显然不能用在我们的项目里；同时AES算法则属于密钥长度确定的块加密，其实不管是流加密还是块加密都要求密钥长度和明文长度一致，但块加密的解决方案是将过长的原文拆分成一块块，每块长度与密钥长度一致，不足的使用一定填充模式进行填充，本项目使用的是Pkcs7填充，CryptoJS默认也是这个模式。</p>\n<p>前面提到的CBC (Cipher Book Chaining)则是块加密模式的一种，中文称为密文分组链接模式，块加密模式定义了块之间是如何合作产生最终密文的。在CBC加密模式中，我们要首先定义一个不需要很长的IV (Initialization Vector)初始化向量，这个向量只用一次，就是与第一块明文进行XOR运算，然后用密钥对混淆过的第一块明文进行加密，生成第一块密文，紧接着每块密文又会成为下一块明文的“IV”，直到所有明文块都生成对应的密文块。一般而言每次加密都会生成不一样的IV，使得即便同一段明文也总会生成不一样的密文，防止攻击者使用选择明文攻击法。</p>\n<h3 id=\"Diffie-Hellman密钥交换协议\"><a href=\"#Diffie-Hellman密钥交换协议\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换协议\"></a>Diffie-Hellman密钥交换协议</h3><p>前面说到我们用AES对称加密算法来加密消息，但我们发现还有问题，那就是我们要怎么安全地传输对称密钥呢？要怎么储存已生成的对称密钥呢？</p>\n<p>那有没有安全的通信通道或者我们用非对称加密对密钥再加密一次？从维基百科的介绍中我们可以大致理解到：目前并没有真正的、第三方无法接触的安全通信通道（也许以后量子网络能做到），都是使用了一些技巧，就像是魔术师的障眼法。后者理论上能阻止第三方得到对称密钥（作为非对称加密的明文），但密钥储存的问题也还是没有解决：因为密钥不能放在服务端的话就只能放在客户端，这就会给客户端造成十分大的压力，尤其是当聊天对象增多以后。</p>\n<p>那有没有什么办法能在不安全的通道中安全地传递密钥呢？有人看到这里可能就要说我在想peach或者劝我吃花生米了，但你别说，还真有，就是Diffie-Hellman密钥交换协议。不过如果非要抠字眼的话，这协议并不是传递密钥，而是通过传递中间物进一步计算出密钥（Shared Secret）。</p>\n<p>这里我们又要请出我们的老伙计维基百科了，里面用了一个颜料叠加的形象例子，好像中文界面就没有这个图。简单来说，就是Alice和Bob分别用自己的私钥和一个提前约定好的数g进行计算，计算结果告知对方，这个计算结果就是我前面所说的双方传递的中间物。然后双方拿到对方的中间物再和自己的私钥进行计算，这样两个人就能得到一致的结果了，就是Alice.private_key + g + Bob.private_key（这里的+不是四则运算里的加法，其实是mod取余，除数记为p是预先设定好的质数），你会发现这不就是结合律吗？</p>\n<p>这个协议要统一g和p这两个数，其中p要是很大的质数，并且这两个数都不是需要保密的对象，也就不用担心泄露。涉及到的计算利用了著名的离散对数问题，也即在知道(a^k) mod p = b这个式子中的a, p, b的时候无法高效计算出k值的问题，当然前提p得是个大质数。</p>\n<h2 id=\"Web客户端\"><a href=\"#Web客户端\" class=\"headerlink\" title=\"Web客户端\"></a>Web客户端</h2><ul>\n<li>JS运行时：Node.js 6.13.4</li>\n<li>JS框架：Vue 2.6.10 + Element 2.13.0</li>\n<li>加密算法库：Diffie-Hellman密钥交换协议（Crypto 1.0.1）; </li>\n<li>AES对称加密（CryptoJS 2.1.3）</li>\n<li>其它：WebSocket</li>\n</ul>\n<p>Node.js是异步事件驱动的JavaScript运行时，所谓运行时其实就是程序的依赖库，异步事件就是指被调用的异步函数不管任务是否完成都立即返回，运行的线程不被挂起继续进行下一个语句，而该异步函数完成任务后会进行回调（即通知调用的线程）。提到Node.js又不得不提一下npm (Node Package Manager),这是非常实用的node包管理器，只需要<code>$ npm install &lt;package-name&gt;</code>就可以把许多主流的JS依赖包下载到项目中来。</p>\n<p>Vue提供了响应式和组件化的视图组件，响应式指的是网页在移动设备端打开时可以自适应设备屏幕分辨率和尺寸，优化用户体验；组件化指的是将可能重复出现的视图封装成可重复调用的自定义组件。Vue将组件写成.vue文件，并在上层页面中使用标签进行调用（e.g. 程序员写了一个名为co-example.vue的组件，调用时使用<code>&lt;co-example&gt;&lt;/co-example&gt;</code>）。Element是基于vue的ui库，说实话当时是随便找的，后来才知道是饿了么的UI，总的来说还不错吧，挺多有用的小组件，颜色主题的想法我也挺喜欢的。不过一定要说的话，有一个小问题就是Layout布局中只有列间距没有行间距的参数。</p>\n<p>然后是加密算法库。当然了，这个项目肯定不止用了加密算法的库，只不过信息加密是聊天系统十分重要的一点，所以这两个加密算法库就单独拿出来讲讲。我们使用了Diffie-Hellman密钥交换协议和AES对称加密，其中Crypto是Node.js原生库，我们原计划用它来实现加密的整个流程，只是由于某些尚不清楚的原因，Crypto的AES相关函数无法被找到进行调用，不得以我们又用了另一个加密算法库CryptoJS。又因为CryptoJS只实现了加解密算法，并没有实现Diffie-Hellman，我们最终采用了二者共用的策略。密钥交换协议和对称加密这两者在该项目中缺一不可，具体会在后面提到。</p>\n<p>“WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层”。WebSocket被我们用来进行客户端和服务端之间的通信，因为是全双工，所以两端可以双向同时传输消息，并且建立连接后可以持续通信。</p>\n","site":{"data":{}},"excerpt":"<p>最近和几个同学刚做完一个为期大半年的分布式聊天系统项目，于是有一些些心得想要记录下来。可能会有些又臭又长，想大致了解的话重点看消息加密设计和实现就好了。最后附上项目链接。</p>","more":"<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>聊天系统就是像我们常用的QQ、微信这些。而我们的分布式聊天系统主要包括三个部分：数据库服务端、Web客户端和Android客户端。理想状态下，服务端和Web客户端各部署在独立的两台服务器上，Android客户端则被打包成app安装于用户手机上。但是为了方便合作和互相监管，我们将这三部分分别写作了项目下的三个模块。<br>我们主要的通讯思路是服务端和客户端之间通过websocket协议传输json文件，文件包含对数据库读写的请求。具体可以查看我们项目的Wiki，这里就不赘述了。因为我主要负责的是Web客户端的实现，所以这篇文章主要也会详讲这一部分的结构和遇到的问题。如果真的对我们整个系统感兴趣的话，项目库里面也是有具体的报告，在final_report_latex下。</p>\n<h2 id=\"需求及功能\"><a href=\"#需求及功能\" class=\"headerlink\" title=\"需求及功能\"></a>需求及功能</h2><h3 id=\"已实现功能\"><a href=\"#已实现功能\" class=\"headerlink\" title=\"已实现功能\"></a>已实现功能</h3><ul>\n<li><p>注册登录<br>  注册时检查sql注入，要求密码包含三种类型字符等，如不符合要求将拒绝注册；发送注册请求前对密码进行md5哈希计算，保证服务端无法获取原密码；由于本项目消息加密的实现使得私钥只储存于注册设备，所以目前登录只允许注册账号的设备登录该账号。Web客户端发起登录请求前将首先检查本地内存localStorage是否存在相关私钥（私钥不参与登录验证过程，但是和消息加解密有关）。</p>\n</li>\n<li><p>用户搜索及添加<br>  本项目发起聊天不需要经过对方同意，更类似于陌生人聊天室，可以通过搜索功能找到符合搜索关键词模式的所有用户，并生成新的聊天窗口，聊天窗口不会保留至下次登录，聊天记录也不会保存至本地。</p>\n</li>\n<li><p>双方消息加密<br>  用户聊天内容的私密性要进行保护。和国内常见聊天软件不一样的是，我们的项目更强调端对端的消息加密和用户的隐私保护，也即服务端无法获取用户实际聊天内容，只储存加密后的消息，并且不直接储存用户密钥。</p>\n<p>  我们采用AES+Diffie-Hellman的结合实现信息加密。基本设计是：首先每个用户在新注册时都会本地生成新的密钥对（符合Diffie-Hellman交换规则），并将公钥进行Base64编码发送至服务端保存，这个密钥对将用来计算两方共同密钥 Shared Secret 进行AES的对称加解密。</p>\n</li>\n<li><p>历史记录获取<br>  这其实就是一个请求查询数据库的过程，Web端的主要处理是在得到消息后进行解密并根据时间排序以及呈现。这里发生过一个有趣的问题，就是时区的问题，当时我们几个人在不同的地区（一些人由于疫情提前回家了），所以当我们远程连接数据库的时候发现消息时间出现了不一致，也就导致消息展现顺序错乱。后来我们的解决方法也很简单粗暴，就是直接改服务端的系统时间[笑哭.jpg]，毕竟赶时间。当然实际还有更细致的解决方法，我目前能想到的就是直接储存1970年1月1日至今经过的时间数，客户端在接收到时间后再根据系统时区进行转换。</p>\n</li>\n</ul>\n<h3 id=\"可扩展功能\"><a href=\"#可扩展功能\" class=\"headerlink\" title=\"可扩展功能\"></a>可扩展功能</h3><ul>\n<li>不限字数长度的聊天消息，需要解决数据库储存、JSON请求长度等问题；</li>\n<li>消息类型增加emoji、图片、视频和文档；</li>\n<li>群组聊天多方加密；</li>\n</ul>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><h3 id=\"AES对称加密\"><a href=\"#AES对称加密\" class=\"headerlink\" title=\"AES对称加密\"></a>AES对称加密</h3><p>首先大家都知道密码算法按照密钥特点分为两种：对称加密和非对称加密。其中对称加密比较常见的是AES算法和DES算法，非对称加密则是RSA算法和ECC算法。</p>\n<p>我们选择对称加密来加解密消息的原因一个是非对称加密的效率比较低下，另一个是一条非对称加密后生成密文只能被接收方解密成明文，就连发送方也无法解密，这会造成历史记录获取失败，除非发送方每次都推一条重复的消息（用自己的公钥加密）到服务端数据库。</p>\n<p>说完了选择对称加密的原因，我们再来了解一下AES算法，维基百科里说的很详细这里就不多赘述，简而言之就是一系列不太复杂的逻辑操作但是我脑子记不住。我以前学密码学的时候做过实现AES的Java程序，过不久就忘得一干二净。我觉得大概理解了就差不多了，毕竟我们搞开发又不是做研究，重点还是应该放在API调用上。这里我用的是CryptoJS的AES-256-CBC，其中256指的是单位为bit的密钥长度，CBC是块加密模式。</p>\n<p>加密还有一种分法，就是分为流加密和块加密，其中流加密的密钥随机生成并且长度和明文一致，按位（bit）计算，而且为了保证安全性要求密钥每次都不一样的，这显然不能用在我们的项目里；同时AES算法则属于密钥长度确定的块加密，其实不管是流加密还是块加密都要求密钥长度和明文长度一致，但块加密的解决方案是将过长的原文拆分成一块块，每块长度与密钥长度一致，不足的使用一定填充模式进行填充，本项目使用的是Pkcs7填充，CryptoJS默认也是这个模式。</p>\n<p>前面提到的CBC (Cipher Book Chaining)则是块加密模式的一种，中文称为密文分组链接模式，块加密模式定义了块之间是如何合作产生最终密文的。在CBC加密模式中，我们要首先定义一个不需要很长的IV (Initialization Vector)初始化向量，这个向量只用一次，就是与第一块明文进行XOR运算，然后用密钥对混淆过的第一块明文进行加密，生成第一块密文，紧接着每块密文又会成为下一块明文的“IV”，直到所有明文块都生成对应的密文块。一般而言每次加密都会生成不一样的IV，使得即便同一段明文也总会生成不一样的密文，防止攻击者使用选择明文攻击法。</p>\n<h3 id=\"Diffie-Hellman密钥交换协议\"><a href=\"#Diffie-Hellman密钥交换协议\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换协议\"></a>Diffie-Hellman密钥交换协议</h3><p>前面说到我们用AES对称加密算法来加密消息，但我们发现还有问题，那就是我们要怎么安全地传输对称密钥呢？要怎么储存已生成的对称密钥呢？</p>\n<p>那有没有安全的通信通道或者我们用非对称加密对密钥再加密一次？从维基百科的介绍中我们可以大致理解到：目前并没有真正的、第三方无法接触的安全通信通道（也许以后量子网络能做到），都是使用了一些技巧，就像是魔术师的障眼法。后者理论上能阻止第三方得到对称密钥（作为非对称加密的明文），但密钥储存的问题也还是没有解决：因为密钥不能放在服务端的话就只能放在客户端，这就会给客户端造成十分大的压力，尤其是当聊天对象增多以后。</p>\n<p>那有没有什么办法能在不安全的通道中安全地传递密钥呢？有人看到这里可能就要说我在想peach或者劝我吃花生米了，但你别说，还真有，就是Diffie-Hellman密钥交换协议。不过如果非要抠字眼的话，这协议并不是传递密钥，而是通过传递中间物进一步计算出密钥（Shared Secret）。</p>\n<p>这里我们又要请出我们的老伙计维基百科了，里面用了一个颜料叠加的形象例子，好像中文界面就没有这个图。简单来说，就是Alice和Bob分别用自己的私钥和一个提前约定好的数g进行计算，计算结果告知对方，这个计算结果就是我前面所说的双方传递的中间物。然后双方拿到对方的中间物再和自己的私钥进行计算，这样两个人就能得到一致的结果了，就是Alice.private_key + g + Bob.private_key（这里的+不是四则运算里的加法，其实是mod取余，除数记为p是预先设定好的质数），你会发现这不就是结合律吗？</p>\n<p>这个协议要统一g和p这两个数，其中p要是很大的质数，并且这两个数都不是需要保密的对象，也就不用担心泄露。涉及到的计算利用了著名的离散对数问题，也即在知道(a^k) mod p = b这个式子中的a, p, b的时候无法高效计算出k值的问题，当然前提p得是个大质数。</p>\n<h2 id=\"Web客户端\"><a href=\"#Web客户端\" class=\"headerlink\" title=\"Web客户端\"></a>Web客户端</h2><ul>\n<li>JS运行时：Node.js 6.13.4</li>\n<li>JS框架：Vue 2.6.10 + Element 2.13.0</li>\n<li>加密算法库：Diffie-Hellman密钥交换协议（Crypto 1.0.1）; </li>\n<li>AES对称加密（CryptoJS 2.1.3）</li>\n<li>其它：WebSocket</li>\n</ul>\n<p>Node.js是异步事件驱动的JavaScript运行时，所谓运行时其实就是程序的依赖库，异步事件就是指被调用的异步函数不管任务是否完成都立即返回，运行的线程不被挂起继续进行下一个语句，而该异步函数完成任务后会进行回调（即通知调用的线程）。提到Node.js又不得不提一下npm (Node Package Manager),这是非常实用的node包管理器，只需要<code>$ npm install &lt;package-name&gt;</code>就可以把许多主流的JS依赖包下载到项目中来。</p>\n<p>Vue提供了响应式和组件化的视图组件，响应式指的是网页在移动设备端打开时可以自适应设备屏幕分辨率和尺寸，优化用户体验；组件化指的是将可能重复出现的视图封装成可重复调用的自定义组件。Vue将组件写成.vue文件，并在上层页面中使用标签进行调用（e.g. 程序员写了一个名为co-example.vue的组件，调用时使用<code>&lt;co-example&gt;&lt;/co-example&gt;</code>）。Element是基于vue的ui库，说实话当时是随便找的，后来才知道是饿了么的UI，总的来说还不错吧，挺多有用的小组件，颜色主题的想法我也挺喜欢的。不过一定要说的话，有一个小问题就是Layout布局中只有列间距没有行间距的参数。</p>\n<p>然后是加密算法库。当然了，这个项目肯定不止用了加密算法的库，只不过信息加密是聊天系统十分重要的一点，所以这两个加密算法库就单独拿出来讲讲。我们使用了Diffie-Hellman密钥交换协议和AES对称加密，其中Crypto是Node.js原生库，我们原计划用它来实现加密的整个流程，只是由于某些尚不清楚的原因，Crypto的AES相关函数无法被找到进行调用，不得以我们又用了另一个加密算法库CryptoJS。又因为CryptoJS只实现了加解密算法，并没有实现Diffie-Hellman，我们最终采用了二者共用的策略。密钥交换协议和对称加密这两者在该项目中缺一不可，具体会在后面提到。</p>\n<p>“WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层”。WebSocket被我们用来进行客户端和服务端之间的通信，因为是全双工，所以两端可以双向同时传输消息，并且建立连接后可以持续通信。</p>"},{"title":"Git常用命令","date":"2018-11-06T16:00:00.000Z","_content":"\n以下命令中，origin常用作远程版本库名，master则为主要分支名。\n\n<!--more-->\n\n## 本地创建版本库\n新建一个空文件夹，在该路径下打开bash并输入命令$ git init，将生成一个.git隐藏文件。\n\n## add&commit\n```$ git add <file>```\n```$ git commit -m <message>```\n\n## 添加远程版本库\n```$ git remote add orign <URL>```\n\n## 查看关联远程版本库\n```$ git remote```\n\n## 更新远程版本库版本信息到本地\n```$ git fetch```\n\n## 同步远程版本库到本地\n```$ git pull -u origin master```\n\n## 同步本地版本库到远程\n```$ git push -u origin master```\n\n## 克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\n```$ git clone <URL>（等效于 init+remote add+pull）```\n\n## 新建及更换分支（本地）\n```$ git checkout -b <branch>```\n\n## 合并分支到目前工作分支\n```$ git merge <branch-to-be-merged>```\n\n## 版本回退\n```$ git reset [option] <head> ([option]=[–soft | –hard | –mixed]) ```\n\n## 版本恢复（错误回退后恢复到未来版本）\n```$ git reflog```查看最近版本信息+版本回退","source":"_posts/git_command.md","raw":"---\ntitle: Git常用命令\ndate: 2018-11-07\ncategories: Command\ntags: Git\n---\n\n以下命令中，origin常用作远程版本库名，master则为主要分支名。\n\n<!--more-->\n\n## 本地创建版本库\n新建一个空文件夹，在该路径下打开bash并输入命令$ git init，将生成一个.git隐藏文件。\n\n## add&commit\n```$ git add <file>```\n```$ git commit -m <message>```\n\n## 添加远程版本库\n```$ git remote add orign <URL>```\n\n## 查看关联远程版本库\n```$ git remote```\n\n## 更新远程版本库版本信息到本地\n```$ git fetch```\n\n## 同步远程版本库到本地\n```$ git pull -u origin master```\n\n## 同步本地版本库到远程\n```$ git push -u origin master```\n\n## 克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\n```$ git clone <URL>（等效于 init+remote add+pull）```\n\n## 新建及更换分支（本地）\n```$ git checkout -b <branch>```\n\n## 合并分支到目前工作分支\n```$ git merge <branch-to-be-merged>```\n\n## 版本回退\n```$ git reset [option] <head> ([option]=[–soft | –hard | –mixed]) ```\n\n## 版本恢复（错误回退后恢复到未来版本）\n```$ git reflog```查看最近版本信息+版本回退","slug":"git_command","published":1,"updated":"2022-02-18T19:33:33.789Z","_id":"ckzss5ej1000du8upf57437ut","comments":1,"layout":"post","photos":[],"link":"","content":"<p>以下命令中，origin常用作远程版本库名，master则为主要分支名。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"本地创建版本库\"><a href=\"#本地创建版本库\" class=\"headerlink\" title=\"本地创建版本库\"></a>本地创建版本库</h2><p>新建一个空文件夹，在该路径下打开bash并输入命令$ git init，将生成一个.git隐藏文件。</p>\n<h2 id=\"add-amp-commit\"><a href=\"#add-amp-commit\" class=\"headerlink\" title=\"add&amp;commit\"></a>add&amp;commit</h2><p><code>$ git add &lt;file&gt;</code><br><code>$ git commit -m &lt;message&gt;</code></p>\n<h2 id=\"添加远程版本库\"><a href=\"#添加远程版本库\" class=\"headerlink\" title=\"添加远程版本库\"></a>添加远程版本库</h2><p><code>$ git remote add orign &lt;URL&gt;</code></p>\n<h2 id=\"查看关联远程版本库\"><a href=\"#查看关联远程版本库\" class=\"headerlink\" title=\"查看关联远程版本库\"></a>查看关联远程版本库</h2><p><code>$ git remote</code></p>\n<h2 id=\"更新远程版本库版本信息到本地\"><a href=\"#更新远程版本库版本信息到本地\" class=\"headerlink\" title=\"更新远程版本库版本信息到本地\"></a>更新远程版本库版本信息到本地</h2><p><code>$ git fetch</code></p>\n<h2 id=\"同步远程版本库到本地\"><a href=\"#同步远程版本库到本地\" class=\"headerlink\" title=\"同步远程版本库到本地\"></a>同步远程版本库到本地</h2><p><code>$ git pull -u origin master</code></p>\n<h2 id=\"同步本地版本库到远程\"><a href=\"#同步本地版本库到远程\" class=\"headerlink\" title=\"同步本地版本库到远程\"></a>同步本地版本库到远程</h2><p><code>$ git push -u origin master</code></p>\n<h2 id=\"克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\"><a href=\"#克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\" class=\"headerlink\" title=\"克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\"></a>克隆远程版本库到本地（在此基础上push则无须添加远程版本库）</h2><p><code>$ git clone &lt;URL&gt;（等效于 init+remote add+pull）</code></p>\n<h2 id=\"新建及更换分支（本地）\"><a href=\"#新建及更换分支（本地）\" class=\"headerlink\" title=\"新建及更换分支（本地）\"></a>新建及更换分支（本地）</h2><p><code>$ git checkout -b &lt;branch&gt;</code></p>\n<h2 id=\"合并分支到目前工作分支\"><a href=\"#合并分支到目前工作分支\" class=\"headerlink\" title=\"合并分支到目前工作分支\"></a>合并分支到目前工作分支</h2><p><code>$ git merge &lt;branch-to-be-merged&gt;</code></p>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><p><code>$ git reset [option] &lt;head&gt; ([option]=[–soft | –hard | –mixed]) </code></p>\n<h2 id=\"版本恢复（错误回退后恢复到未来版本）\"><a href=\"#版本恢复（错误回退后恢复到未来版本）\" class=\"headerlink\" title=\"版本恢复（错误回退后恢复到未来版本）\"></a>版本恢复（错误回退后恢复到未来版本）</h2><p><code>$ git reflog</code>查看最近版本信息+版本回退</p>\n","site":{"data":{}},"excerpt":"<p>以下命令中，origin常用作远程版本库名，master则为主要分支名。</p>","more":"<h2 id=\"本地创建版本库\"><a href=\"#本地创建版本库\" class=\"headerlink\" title=\"本地创建版本库\"></a>本地创建版本库</h2><p>新建一个空文件夹，在该路径下打开bash并输入命令$ git init，将生成一个.git隐藏文件。</p>\n<h2 id=\"add-amp-commit\"><a href=\"#add-amp-commit\" class=\"headerlink\" title=\"add&amp;commit\"></a>add&amp;commit</h2><p><code>$ git add &lt;file&gt;</code><br><code>$ git commit -m &lt;message&gt;</code></p>\n<h2 id=\"添加远程版本库\"><a href=\"#添加远程版本库\" class=\"headerlink\" title=\"添加远程版本库\"></a>添加远程版本库</h2><p><code>$ git remote add orign &lt;URL&gt;</code></p>\n<h2 id=\"查看关联远程版本库\"><a href=\"#查看关联远程版本库\" class=\"headerlink\" title=\"查看关联远程版本库\"></a>查看关联远程版本库</h2><p><code>$ git remote</code></p>\n<h2 id=\"更新远程版本库版本信息到本地\"><a href=\"#更新远程版本库版本信息到本地\" class=\"headerlink\" title=\"更新远程版本库版本信息到本地\"></a>更新远程版本库版本信息到本地</h2><p><code>$ git fetch</code></p>\n<h2 id=\"同步远程版本库到本地\"><a href=\"#同步远程版本库到本地\" class=\"headerlink\" title=\"同步远程版本库到本地\"></a>同步远程版本库到本地</h2><p><code>$ git pull -u origin master</code></p>\n<h2 id=\"同步本地版本库到远程\"><a href=\"#同步本地版本库到远程\" class=\"headerlink\" title=\"同步本地版本库到远程\"></a>同步本地版本库到远程</h2><p><code>$ git push -u origin master</code></p>\n<h2 id=\"克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\"><a href=\"#克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\" class=\"headerlink\" title=\"克隆远程版本库到本地（在此基础上push则无须添加远程版本库）\"></a>克隆远程版本库到本地（在此基础上push则无须添加远程版本库）</h2><p><code>$ git clone &lt;URL&gt;（等效于 init+remote add+pull）</code></p>\n<h2 id=\"新建及更换分支（本地）\"><a href=\"#新建及更换分支（本地）\" class=\"headerlink\" title=\"新建及更换分支（本地）\"></a>新建及更换分支（本地）</h2><p><code>$ git checkout -b &lt;branch&gt;</code></p>\n<h2 id=\"合并分支到目前工作分支\"><a href=\"#合并分支到目前工作分支\" class=\"headerlink\" title=\"合并分支到目前工作分支\"></a>合并分支到目前工作分支</h2><p><code>$ git merge &lt;branch-to-be-merged&gt;</code></p>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><p><code>$ git reset [option] &lt;head&gt; ([option]=[–soft | –hard | –mixed]) </code></p>\n<h2 id=\"版本恢复（错误回退后恢复到未来版本）\"><a href=\"#版本恢复（错误回退后恢复到未来版本）\" class=\"headerlink\" title=\"版本恢复（错误回退后恢复到未来版本）\"></a>版本恢复（错误回退后恢复到未来版本）</h2><p><code>$ git reflog</code>查看最近版本信息+版本回退</p>"}],"PostAsset":[{"_id":"source/_posts/android_reverse_analytics/compilation_assembly.png","slug":"compilation_assembly.png","post":"ckzsre96e0000wcup2yzr2kj1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckzsre96e0000wcup2yzr2kj1","category_id":"ckzsprryx000yjcuphpkj7ir4","_id":"ckzsre96j0002wcup29ds7ebo"},{"post_id":"ckzsrknm00008u8up54od2aoo","category_id":"ckzsripwi0006u8upe7qlc1uy","_id":"ckzsrknm2000au8upc5bn5jf8"},{"post_id":"ckzss5ej1000du8upf57437ut","category_id":"ckzss6n2e000hu8upbwr5bjr7","_id":"ckzss6n2f000iu8upei7cew47"},{"post_id":"ckzsrf1430004zcup4tay36dk","category_id":"ckzst6qjg0000xgup6o5c48yw","_id":"ckzst6qjg0001xgup04c0b7wi"},{"post_id":"ckzsrf1400001zcupcg52fldq","category_id":"ckzss6n2e000hu8upbwr5bjr7","_id":"ckzst7fq00004xgupci57hfau"},{"post_id":"ckzsrf1410002zcup14cifb25","category_id":"ckzst7lfm0005xgup6edudx94","_id":"ckzst7lfn0006xgup8jk8599g"},{"post_id":"ckzsrfl500000u8up3x3bg07e","category_id":"ckzst8oqv0009xgup6ks60yio","_id":"ckzst8oqv000axguphicv7r0h"}],"PostTag":[{"post_id":"ckzsre96e0000wcup2yzr2kj1","tag_id":"ckzsqhfph0013jcuphzoj1p69","_id":"ckzsre96j0001wcup2kay3p8u"},{"post_id":"ckzsrf1400001zcupcg52fldq","tag_id":"ckzsoeu6y000cjcupfufb100v","_id":"ckzsrf1430003zcup0zm07dm6"},{"post_id":"ckzsrf1430004zcup4tay36dk","tag_id":"ckzsob7gi0006jcup856o1keb","_id":"ckzsrf1440006zcupbi989trw"},{"post_id":"ckzsrfl500000u8up3x3bg07e","tag_id":"ckzsnzubj0001jcupf8pya4p8","_id":"ckzsrfl520001u8up6i3deq2k"},{"post_id":"ckzsrknm00008u8up54od2aoo","tag_id":"ckzsriik50004u8up10arhy2g","_id":"ckzsrknm10009u8upaovxftf2"},{"post_id":"ckzss5ej1000du8upf57437ut","tag_id":"ckzss6fdm000fu8upaqft9mms","_id":"ckzss6fdn000gu8up6ps0gxew"},{"post_id":"ckzsrf1410002zcup14cifb25","tag_id":"ckzst7uka0007xgup04w3hrw6","_id":"ckzst7ukb0008xgupar53dk1e"}],"Tag":[{"name":"Blog","_id":"ckzsnzubj0001jcupf8pya4p8"},{"name":"Computer Network","_id":"ckzsob7gi0006jcup856o1keb"},{"name":"Linux","_id":"ckzsoeu6y000cjcupfufb100v"},{"name":"Test","_id":"ckzsoh31y000gjcup6me55vnx"},{"name":"Android, Security","_id":"ckzspljll000qjcupba715qaj"},{"name":"Android; Security","_id":"ckzspm9wu000sjcupagvj6gyt"},{"name":"Android Security","_id":"ckzspmet8000ujcup3ram3f6o"},{"name":"Security","_id":"ckzsqhfph0013jcuphzoj1p69"},{"name":"Web","_id":"ckzsriik50004u8up10arhy2g"},{"name":"Git","_id":"ckzss6fdm000fu8upaqft9mms"},{"name":"Automation Test","_id":"ckzst7uka0007xgup04w3hrw6"}]}}